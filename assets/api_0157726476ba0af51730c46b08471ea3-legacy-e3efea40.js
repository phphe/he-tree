System.register(["./code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966-legacy-84a9423b.js","./index-legacy-be5d2fb8.js","./CodeContainer-legacy-9e5acd0c.js","./material-design-legacy-25d5817e.js"],(function(e,l){"use strict";var a,n,t,d,o,r,i,s,c,u,g,p,h,f,m,v,b;return{setters:[e=>{a=e.i,n=e.a},e=>{t=e._,d=e.g,o=e.u,r=e.f,i=e.h,s=e.r,c=e.c,u=e.a,g=e.b,p=e.w,h=e.e,f=e.i,m=e.o},e=>{v=e._,b=e.C},null],execute:function(){const l={extends:v,components:{CodeContainer:b,inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532:a,inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662:n},setup(){const e=d(),l={name:"API",id:"api",level:1,children:[{name:"BaseTree",id:"basetree",level:2,children:[{name:"props",id:"props",level:3,children:[{name:"btt",id:"btt",level:4,children:[]},{name:"childrenKey",id:"childrenkey",level:4,children:[]},{name:"defaultOpen",id:"defaultopen",level:4,children:[]},{name:"indent",id:"indent",level:4,children:[]},{name:"nodeKey",id:"nodekey",level:4,children:[]},{name:"rtl",id:"rtl",level:4,children:[]},{name:"statHandler",id:"stathandler",level:4,children:[]},{name:"table",id:"table",level:4,children:[]},{name:"textKey",id:"textkey",level:4,children:[]},{name:"updateBehavior",id:"updatebehavior",level:4,children:[]},{name:"virtualization",id:"virtualization",level:4,children:[]},{name:"virtualizationPrerenderCount",id:"virtualizationprerendercount",level:4,children:[]},{name:"treeLine",id:"treeline",level:4,children:[]},{name:"treeLineOffset",id:"treelineoffset",level:4,children:[]},{name:"watermark",id:"watermark",level:4,children:[]}]},{name:"data",id:"data",level:3,children:[{name:"dragNode",id:"dragnode",level:4,children:[]},{name:"dragOvering",id:"dragovering",level:4,children:[]},{name:"self",id:"self",level:4,children:[]},{name:"stats",id:"stats",level:4,children:[]},{name:"statsFlat",id:"statsflat",level:4,children:[]}]},{name:"computed",id:"computed",level:3,children:[{name:"rootChildren",id:"rootchildren",level:4,children:[]}]},{name:"methods",id:"methods",level:3,children:[{name:"methods examples",id:"methods-examples",level:4,children:[]},{name:"add",id:"add",level:4,children:[]},{name:"addMulti",id:"addmulti",level:4,children:[]},{name:"batchUpdate",id:"batchupdate",level:4,children:[]},{name:"closeAll",id:"closeall",level:4,children:[]},{name:"getChecked",id:"getchecked",level:4,children:[]},{name:"getData",id:"getdata",level:4,children:[]},{name:"getRootEl",id:"getrootel",level:4,children:[]},{name:"getSiblings",id:"getsiblings",level:4,children:[]},{name:"getStat",id:"getstat",level:4,children:[]},{name:"getUnchecked",id:"getunchecked",level:4,children:[]},{name:"has",id:"has",level:4,children:[]},{name:"isVisible",id:"isvisible",level:4,children:[]},{name:"iterateParent",id:"iterateparent",level:4,children:[]},{name:"move",id:"move",level:4,children:[]},{name:"openAll",id:"openall",level:4,children:[]},{name:"openNodeAndParents",id:"opennodeandparents",level:4,children:[]},{name:"remove",id:"remove",level:4,children:[]},{name:"removeMulti",id:"removemulti",level:4,children:[]},{name:"updateCheck",id:"updatecheck",level:4,children:[]}]},{name:"events",id:"events",level:3,children:[{name:"check:node",id:"checknode",level:4,children:[]},{name:"click:node",id:"clicknode",level:4,children:[]},{name:"close:node",id:"closenode",level:4,children:[]},{name:"open:node",id:"opennode",level:4,children:[]}]},{name:"slots",id:"slots",level:3,children:[{name:"default",id:"default",level:4,children:[]},{name:"placeholder",id:"placeholder",level:4,children:[]},{name:"prepend",id:"prepend",level:4,children:[]},{name:"append",id:"append",level:4,children:[]}]}]},{name:"Draggable",id:"draggable",level:2,children:[{name:"props",id:"props-1",level:3,children:[{name:"beforeDragOpen",id:"beforedragopen",level:4,children:[]},{name:"disableDrag",id:"disabledrag",level:4,children:[]},{name:"disableDrop",id:"disabledrop",level:4,children:[]},{name:"dragOpen",id:"dragopen",level:4,children:[]},{name:"dragOpenDelay",id:"dragopendelay",level:4,children:[]},{name:"eachDraggable",id:"eachdraggable",level:4,children:[]},{name:"eachDroppable",id:"eachdroppable",level:4,children:[]},{name:"externalDataHandler",id:"externaldatahandler",level:4,children:[]},{name:"keepPlaceholder",id:"keepplaceholder",level:4,children:[]},{name:"maxLevel",id:"maxlevel",level:4,children:[]},{name:"onExternalDragOver",id:"onexternaldragover",level:4,children:[]},{name:"resolveStartMovePoint",id:"resolvestartmovepoint",level:4,children:[]},{name:"rootDroppable",id:"rootdroppable",level:4,children:[]},{name:"triggerClass",id:"triggerclass",level:4,children:[]}]},{name:"methods",id:"methods-1",level:3,children:[{name:"getNodeByElement",id:"getnodebyelement",level:4,children:[]},{name:"isDraggable",id:"isdraggable",level:4,children:[]},{name:"isDroppable",id:"isdroppable",level:4,children:[]},{name:"ondragstart",id:"ondragstart",level:4,children:[]}]},{name:"events",id:"events-1",level:3,children:[{name:"before-drag-start",id:"before-drag-start",level:4,children:[]},{name:"after-drop",id:"after-drop",level:4,children:[]},{name:"change",id:"change",level:4,children:[]},{name:"enter",id:"enter",level:4,children:[]},{name:"leave",id:"leave",level:4,children:[]}]}]},{name:"Others",id:"others",level:2,children:[{name:"Stat",id:"stat",level:3,children:[]},{name:"dragContext",id:"dragcontext",level:3,children:[{name:"startInfo",id:"startinfo",level:4,children:[]},{name:"targetInfo",id:"targetinfo",level:4,children:[]},{name:"dragNode",id:"dragnode-1",level:4,children:[]},{name:"startTree",id:"starttree",level:4,children:[]},{name:"targetTree",id:"targettree",level:4,children:[]},{name:"Example - dragContext",id:"example---dragcontext",level:4,children:[]}]},{name:"StartInfo",id:"startinfo-1",level:3,children:[]}]}]}||{};o(l.name,e),r.value=l.children||[],i((()=>{r.value=null}))}},_={class:"docs-view"},y={class:"article mt-14 mb-8 prose"},x=f('<p><code>he-tree</code> exports 2 components: <a href="#basetree">BaseTree</a>, <a href="#draggable">Draggable</a>. BaseTree is the base tree component. Draggable extends BaseTree, it includes drag functions. Follow API is simply divided into two parts because of this.</p><p><code>Stat&lt;never&gt;</code>, <code>Stat&lt;unknown&gt;</code> in below are TypeScript format. <code>unknown</code>, <code>never</code>, <code>any</code> represent the node data of user. <code>Stat&lt;never&gt;</code> and <code>Stat&lt;unknown&gt;</code> are same, they mean the <a href="#Stat">stat</a> of a node.</p><p>The origin of all coordinates below is the upper left corner of the window. Such as the return value of <code>Element.getBoundingClientRect()</code>.</p>',3),k=u("p",null,"Tree start from bottom to top.",-1),w=u("p",null,[h("Replace "),u("code",null,"children"),h(" key in data.")],-1),S=u("p",null,"Open all nodes by default.",-1),D=u("p",null,[h("Node indent in "),u("code",null,"px"),h(".")],-1),L=u("p",null,[h("Use"),u("code",null,"index"),h(" or return a unique value as key for Vue loop.")],-1),T=u("p",null,"Display from right to left.",-1),P=u("p",null,[h("Hook method. Handle each "),u("a",{href:"#Stat"},"stat"),h(" after each stat created.")],-1),C=u("p",null,"Render as table.",-1),I=u("p",null,[h("Replace "),u("code",null,"text"),h(" key in data. It is only used in default slot. If you provide your ui code, it may be unused.")],-1),E=u("p",null,"The way of emit new data when inner data changed.",-1),j=u("li",null,"modify: default. Modify binded data.",-1),O=u("li",null,"new: emit a new data, suits for for vuex.",-1),A=u("p",null,"Enable virtual list.",-1),B=u("p",null,"The number of rendered list items at start. Suits for SSR(Server Side Render).",-1),N=u("p",null,[h("Display tree line. "),u("strong",null,"This feature is not valid in table mode.")],-1),H=u("p",null,"Horizontal displacement of tree lines, unit: pixels.",-1),M=u("p",null,"Print a watermark information to browser console.",-1),z=u("p",null,"The dragging node stat.",-1),R=u("p",null,"The tree is being drag overing.",-1),U=u("p",null,"Tree instance.",-1),G=u("p",null,"All stats, tree structure.",-1),K=u("p",null,"All stats, flat structure.",-1),V=u("p",null,"The top-level nodes' stats. Can be considered as a subset of a non-existent root node.",-1),F=u("p",null,"Some methods' examples. Click top right icon to view source code.",-1),W=u("p",null,[h("Add node. parent is null means root. "),u("a",{href:"#methods-examples"},"Example")],-1),Y=u("p",null,[h("Add multiple continuously nodes. parent is null means root. "),u("a",{href:"#methods-examples"},"Example")],-1),q=u("p",null,[h("Merge multiple data update actions, to make it only emit new data once. "),u("a",{href:"#methods-examples"},"Example")],-1),J=u("p",null,[h("Close all nodes. "),u("a",{href:"#methods-examples"},"Example")],-1),Q=u("p",null,[h("Get all checked nodes. Param "),u("code",null,"withDemi"),h(" means including half checked. "),u("a",{href:"#methods-examples"},"Example")],-1),X=u("p",null,[h("Generate and get current data without stat. Param "),u("code",null,"filter"),h(" can handle each node data. "),u("a",{href:"#methods-examples"},"Example")],-1),Z=u("p",null,"Get the root element of the tree component.",-1),$=u("p",null,"Get all siblings of a node including it self.",-1),ee=u("p",null,[h("Get "),u("code",null,"stat"),h(" by node data.")],-1),le=u("p",null,[h("Get all unchecked nodes. Param "),u("code",null,"withDemi"),h(" means including half checked.")],-1),ae=u("p",null,"Detect the tree if has the stat of given node data.",-1),ne=u("p",null,[h("Detect if node is visible. When parent invisible or closed, children are invisible. Param "),u("code",null,"statOrNodeData"),h(" can be node data or stat.")],-1),te=u("p",null,[h("Iterate all parents of a node. Param "),u("code",null,"opt.withSelf"),h(" means including it self. E.g.:")],-1),de=u("p",null,[h("Move node. parent is null means root. Similar to "),u("code",null,"add"),h(", check the example of "),u("code",null,"add"),h(": "),u("a",{href:"#methods-examples"},"Example")],-1),oe=u("p",null,[h("Open all nodes. "),u("a",{href:"#methods-examples"},"Example")],-1),re=u("p",null,[h("Open a node and its all parents to make it visible. The argument "),u("code",null,"nodeDataOrStat"),h(" can be node data or node stat. "),u("a",{href:"#methods-examples"},"Example")],-1),ie=u("p",null,"Remove node.",-1),se=u("p",null,"Remove multiple nodes.",-1),ce=u("p",null,[h("Recalculate "),u("code",null,"checked"),h(" state of all nodes from end to root.")],-1),ue=u("p",null,[h("Parameters: stat. Triggered when node "),u("code",null,"checked"),h(" changed.")],-1),ge=u("p",null,"Parameters: stat. Triggered when click node.",-1),pe=u("p",null,"Parameters: stat. Triggered when close node.",-1),he=u("p",null,"Parameters: stat. Triggered when open node.",-1),fe=u("p",null,"Can be used to customize node ui. Parameters:",-1),me=u("ul",null,[u("li",null,"node: node data"),u("li",null,"stat: runtime info of node"),u("li",null,"indentStyle: node indent style. Only when rendering as a table, user should apply it to a column, usually the first column."),u("li",null,"tree: tree instance.")],-1),ve=u("p",null,"Can be used to customize placeholder ui. Parameters:",-1),be=u("ul",null,[u("li",null,"tree: tree instance.")],-1),_e=u("p",null,"Start of root element inner. Used to add table head when render as table . Parameters:",-1),ye=u("ul",null,[u("li",null,"tree: tree instance.")],-1),xe=u("p",null,"End of root element inner. Used to add table foot when render as table. Parameters:",-1),ke=u("ul",null,[u("li",null,"tree: tree instance.")],-1),we=u("p",null,"Hook method. Call before open node when drag over it. Promise supported.",-1),Se=u("p",null,"Disable drag.",-1),De=u("p",null,"Disable drop.",-1),Le=u("p",null,"Open node when drag over it.",-1),Te=u("p",null,"Wait milliseconds before open node when drag over it.",-1),Pe=u("p",null,"Hook method. Control each node if is draggable. Child will inherit parent if not set.",-1),Ce=u("p",null,"Hook method. Control each node if is droppable. Child will inherit parent if not set.",-1),Ie=u("p",null,"Call when external something dropped to the tree with Drag and Drop API. Tree will call it to create new node data.",-1),Ee=u("p",null,"Keep placeholder when drag leave a tree.",-1),je=u("p",null,"If tree's max level will exceed this after drop, the drop will be prevented.",-1),Oe=u("p",null,[h("Call when external something dragged over the tree with Drag and Drop API. Param "),u("code",null,"event"),h(" is "),u("code",null,"DragEvent"),h(" type of Drag and Drop API. Return "),u("code",null,"false"),h(" to ignore it.")],-1),Ae=u("p",null,[h("The dragging node is think as a point. This means how to get the point. "),u("code",null,"default"),h(" is to get the top left of node . "),u("code",null,"mouse"),h(" is get mouse position. Or you can pass a method to return a coordinate: "),u("code",null,"{x:number,y:number}"),h(".")],-1),Be=u("p",null,[h("Hook method. If the tree root is droppable. Default is "),u("code",null,"true"),h(".")],-1),Ne=u("p",null,"The trigger element css class. Default is the node self. Can be child element of node. A node can has multiple trigger elements.",-1),He=u("p",null,"Get node stat by HTML Element.",-1),Me=u("p",null,"Detect if node draggable.",-1),ze=u("p",null,"Detect if node droppable.",-1),Re=u("p",null,[h("A hook of dragstart event of HTML Drag and Drop API. You can use HTML Drag and Drop API's "),u("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage"},"setDragImage"),h(" method to custom drag image. Refer issue: "),u("a",{href:"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535"},"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535")],-1),Ue=u("p",null,"Parameters: dragNode. Triggered before drag start.",-1),Ge=u("p",null,"Parameters: nothing. Triggered after drop. Only triggered on dropped tree.",-1),Ke=u("p",null,"Parameters: nothing. Triggered after changed by drop. Triggered on both 2 trees when drag cross trees.",-1),Ve=u("p",null,"Parameters: DragEvent. Triggered when drag enter a tree.",-1),Fe=u("p",null,"Parameters: DragEvent. Triggered when drag leave a tree.",-1),We=u("p",null,"Each node has a stat created by tree. It stores runtime info.",-1),Ye=u("p",null,[h("Runtime info when drag. "),u("a",{href:"#example---dragcontext"},"Example"),h(". including: startInfo, targetInfo, dragNode, startTree, targetTree. Import:")],-1),qe=u("p",null,[h("Type: "),u("a",{href:"#StartInfo"},"StartInfo"),h(". Info about drag start.")],-1),Je=u("p",null,[h("Type: "),u("a",{href:"#StartInfo"},"StartInfo"),h(". Info about drag target.")],-1),Qe=u("p",null,[h("Type: "),u("a",{href:"#Stat"},"Stat"),h(". The dragging node.")],-1),Xe=u("p",null,"Draggable component instance. The tree drag start at.",-1),Ze=u("p",null,"Draggable component instance. Drag target tree.",-1),$e=u("p",null,[h("Use the dragContext to obtain the dragNode in "),u("a",{href:"#eachdroppable"},"eachDroppable"),h(" and achieve the following effect: odd nodes only accept odd nodes, even nodes only accept even nodes.")],-1);e("default",t(l,[["render",function(e,l,a,n,t,d){const o=s("vheading"),r=s("CodeContainer"),i=s("Anchor"),f=s("inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532"),v=s("inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662");return m(),c("div",_,[u("div",y,[g(o,{level:1,id:"api"},{default:p((()=>[h("API")])),_:1}),x,g(o,{level:2,id:"basetree"},{default:p((()=>[h("BaseTree")])),_:1}),g(o,{level:3,id:"props"},{default:p((()=>[h("props")])),_:1}),g(o,{level:4,id:"btt"},{default:p((()=>[h("btt")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),k,g(o,{level:4,id:"childrenkey"},{default:p((()=>[h("childrenKey")])),_:1}),g(r,{codeLanguage:"js",code:'{ type: String, default: "children" }\n'}),w,g(o,{level:4,id:"defaultopen"},{default:p((()=>[h("defaultOpen")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),S,g(o,{level:4,id:"indent"},{default:p((()=>[h("indent")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),D,g(o,{level:4,id:"nodekey"},{default:p((()=>[h("nodeKey")])),_:1}),L,g(r,{codeLanguage:"js",code:"{ type:  \"index\" | ((stat: Stat<any>, index: number) => any), default: 'index' }\n"}),g(o,{level:4,id:"rtl"},{default:p((()=>[h("rtl")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),T,g(o,{level:4,id:"stathandler"},{default:p((()=>[h("statHandler")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: (stat: Stat<any>) => Stat<any> }\n"}),P,g(o,{level:4,id:"table"},{default:p((()=>[h("table")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),C,g(o,{level:4,id:"textkey"},{default:p((()=>[h("textKey")])),_:1}),g(r,{codeLanguage:"js",code:'{ type: String, default: "text" }\n'}),I,g(o,{level:4,id:"updatebehavior"},{default:p((()=>[h("updateBehavior")])),_:1}),E,u("ul",null,[j,O,u("li",null,[h("disabled: do nothing. You can use "),g(i,{to:e.resolveHref("/v2/api#getdata"),underline:""},{default:p((()=>[h("getData")])),_:1},8,["to"]),h(" to generate and get current data.")])]),g(o,{level:4,id:"virtualization"},{default:p((()=>[h("virtualization")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),A,g(o,{level:4,id:"virtualizationprerendercount"},{default:p((()=>[h("virtualizationPrerenderCount")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),B,g(o,{level:4,id:"treeline"},{default:p((()=>[h("treeLine")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),N,g(o,{level:4,id:"treelineoffset"},{default:p((()=>[h("treeLineOffset")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Number, default: 8 }\n"}),H,g(o,{level:4,id:"watermark"},{default:p((()=>[h("watermark")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),M,g(o,{level:3,id:"data"},{default:p((()=>[h("data")])),_:1}),g(o,{level:4,id:"dragnode"},{default:p((()=>[h("dragNode")])),_:1}),z,g(o,{level:4,id:"dragovering"},{default:p((()=>[h("dragOvering")])),_:1}),R,g(o,{level:4,id:"self"},{default:p((()=>[h("self")])),_:1}),U,g(o,{level:4,id:"stats"},{default:p((()=>[h("stats")])),_:1}),g(r,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),G,g(o,{level:4,id:"statsflat"},{default:p((()=>[h("statsFlat")])),_:1}),g(r,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),K,g(o,{level:3,id:"computed"},{default:p((()=>[h("computed")])),_:1}),g(o,{level:4,id:"rootchildren"},{default:p((()=>[h("rootChildren")])),_:1}),g(r,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),V,g(o,{level:3,id:"methods"},{default:p((()=>[h("methods")])),_:1}),g(o,{level:4,id:"methods-examples"},{default:p((()=>[h("methods examples")])),_:1}),F,g(f),g(o,{level:4,id:"add"},{default:p((()=>[h("add")])),_:1}),g(r,{codeLanguage:"ts",code:"(nodeData: unknown, parent?: Stat<unknown> | null | undefined, index?: number | null | undefined): void;\n"}),W,g(o,{level:4,id:"addmulti"},{default:p((()=>[h("addMulti")])),_:1}),g(r,{codeLanguage:"ts",code:"(\n  dataArr: any[],\n  parent?: Stat<any> | null,\n  startIndex?: number | null\n): void;\n"}),Y,g(o,{level:4,id:"batchupdate"},{default:p((()=>[h("batchUpdate")])),_:1}),g(r,{codeLanguage:"ts",code:"(task: () => any): void;\n"}),q,g(o,{level:4,id:"closeall"},{default:p((()=>[h("closeAll")])),_:1}),g(r,{codeLanguage:"ts",code:"(): void\n"}),J,g(o,{level:4,id:"getchecked"},{default:p((()=>[h("getChecked")])),_:1}),g(r,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),Q,g(o,{level:4,id:"getdata"},{default:p((()=>[h("getData")])),_:1}),g(r,{codeLanguage:"ts",code:"(filter?: ((data: never) => never) | undefined, root?: Stat<never> | undefined): never[];\n"}),X,g(o,{level:4,id:"getrootel"},{default:p((()=>[h("getRootEl")])),_:1}),g(r,{codeLanguage:"ts",code:"(): HTMLElement;\n"}),Z,g(o,{level:4,id:"getsiblings"},{default:p((()=>[h("getSiblings")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<never>): Stat<never>[];\n"}),$,g(o,{level:4,id:"getstat"},{default:p((()=>[h("getStat")])),_:1}),g(r,{codeLanguage:"ts",code:"(nodeData: unknown): Stat<unknown>\n"}),ee,g(o,{level:4,id:"getunchecked"},{default:p((()=>[h("getUnchecked")])),_:1}),g(r,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),le,g(o,{level:4,id:"has"},{default:p((()=>[h("has")])),_:1}),g(r,{codeLanguage:"ts",code:"(nodeData: unknown): boolean\n"}),ae,g(o,{level:4,id:"isvisible"},{default:p((()=>[h("isVisible")])),_:1}),g(r,{codeLanguage:"ts",code:"(statOrNodeData: Stat<unknown>|unknown): boolean;\n"}),ne,g(o,{level:4,id:"iterateparent"},{default:p((()=>[h("iterateParent")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<unknown>, opt?: {\n    withSelf: boolean;\n} | undefined): Generator<Stat<unknown>, void, unknown>;\n"}),te,g(r,{codeLanguage:"ts",code:"for (const parentStat of tree.iterateParent(nodeStat, { withSelf: false })) {\n  //\n}\n"}),g(o,{level:4,id:"move"},{default:p((()=>[h("move")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<unknown>, parent: Stat<unknown> | null, index: number): boolean;\n"}),de,g(o,{level:4,id:"openall"},{default:p((()=>[h("openAll")])),_:1}),g(r,{codeLanguage:"ts",code:"(): void\n"}),oe,g(o,{level:4,id:"opennodeandparents"},{default:p((()=>[h("openNodeAndParents")])),_:1}),g(r,{codeLanguage:"ts",code:"(nodeDataOrStat): void\n"}),re,g(o,{level:4,id:"remove"},{default:p((()=>[h("remove")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<unknown>): boolean;\n"}),ie,g(o,{level:4,id:"removemulti"},{default:p((()=>[h("removeMulti")])),_:1}),g(r,{codeLanguage:"ts",code:"(dataArr: any[]): boolean;\n"}),se,g(o,{level:4,id:"updatecheck"},{default:p((()=>[h("updateCheck")])),_:1}),g(r,{codeLanguage:"ts",code:"(): void\n"}),ce,g(o,{level:3,id:"events"},{default:p((()=>[h("events")])),_:1}),g(o,{level:4,id:"checknode"},{default:p((()=>[h("check:node")])),_:1}),ue,g(o,{level:4,id:"clicknode"},{default:p((()=>[h("click:node")])),_:1}),ge,g(o,{level:4,id:"closenode"},{default:p((()=>[h("close:node")])),_:1}),pe,g(o,{level:4,id:"opennode"},{default:p((()=>[h("open:node")])),_:1}),he,g(o,{level:3,id:"slots"},{default:p((()=>[h("slots")])),_:1}),g(o,{level:4,id:"default"},{default:p((()=>[h("default")])),_:1}),fe,me,g(o,{level:4,id:"placeholder"},{default:p((()=>[h("placeholder")])),_:1}),ve,be,g(o,{level:4,id:"prepend"},{default:p((()=>[h("prepend")])),_:1}),_e,ye,g(o,{level:4,id:"append"},{default:p((()=>[h("append")])),_:1}),xe,ke,g(o,{level:2,id:"draggable"},{default:p((()=>[h("Draggable")])),_:1}),g(o,{level:3,id:"props-1"},{default:p((()=>[h("props")])),_:1}),g(o,{level:4,id:"beforedragopen"},{default:p((()=>[h("beforeDragOpen")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<any>) : void | Promise<void>\n"}),we,g(o,{level:4,id:"disabledrag"},{default:p((()=>[h("disableDrag")])),_:1}),g(r,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),Se,g(o,{level:4,id:"disabledrop"},{default:p((()=>[h("disableDrop")])),_:1}),g(r,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),De,g(o,{level:4,id:"dragopen"},{default:p((()=>[h("dragOpen")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),Le,g(o,{level:4,id:"dragopendelay"},{default:p((()=>[h("dragOpenDelay")])),_:1}),g(r,{codeLanguage:"js",code:"{ type: Number, default: 0 }\n"}),Te,g(o,{level:4,id:"eachdraggable"},{default:p((()=>[h("eachDraggable")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Pe,g(o,{level:4,id:"eachdroppable"},{default:p((()=>[h("eachDroppable")])),_:1}),g(r,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Ce,g(o,{level:4,id:"externaldatahandler"},{default:p((()=>[h("externalDataHandler")])),_:1}),g(r,{codeLanguage:"ts",code:"(event: DragEvent) : any\n"}),Ie,g(o,{level:4,id:"keepplaceholder"},{default:p((()=>[h("keepPlaceholder")])),_:1}),g(r,{codeLanguage:"ts",code:"{ type: Boolean, default: false }\n"}),Ee,g(o,{level:4,id:"maxlevel"},{default:p((()=>[h("maxLevel")])),_:1}),g(r,{codeLanguage:"ts",code:"{\n  type: Number\n}\n"}),je,g(o,{level:4,id:"onexternaldragover"},{default:p((()=>[h("onExternalDragOver")])),_:1}),g(r,{codeLanguage:"ts",code:"(event: DragEvent) : boolean\n"}),Oe,g(o,{level:4,id:"resolvestartmovepoint"},{default:p((()=>[h("resolveStartMovePoint")])),_:1}),g(r,{codeLanguage:"ts",code:'"mouse" | "default" | ((dragElement: HTMLElement) : Point)\n'}),Ae,g(o,{level:4,id:"rootdroppable"},{default:p((()=>[h("rootDroppable")])),_:1}),g(r,{codeLanguage:"ts",code:"boolean | () : boolean\n"}),Be,g(o,{level:4,id:"triggerclass"},{default:p((()=>[h("triggerClass")])),_:1}),g(r,{codeLanguage:"js",code:"{\n  type: [String, Array]\n} // string | string[]\n"}),Ne,g(o,{level:3,id:"methods-1"},{default:p((()=>[h("methods")])),_:1}),g(o,{level:4,id:"getnodebyelement"},{default:p((()=>[h("getNodeByElement")])),_:1}),g(r,{codeLanguage:"ts",code:"(el: HTMLElement): Stat<any> | null\n"}),He,g(o,{level:4,id:"isdraggable"},{default:p((()=>[h("isDraggable")])),_:1}),g(r,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),Me,g(o,{level:4,id:"isdroppable"},{default:p((()=>[h("isDroppable")])),_:1}),g(r,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),ze,g(o,{level:4,id:"ondragstart"},{default:p((()=>[h("ondragstart")])),_:1}),g(r,{codeLanguage:"ts",code:"(event: DragEvent) => void\n"}),Re,g(o,{level:3,id:"events-1"},{default:p((()=>[h("events")])),_:1}),g(o,{level:4,id:"before-drag-start"},{default:p((()=>[h("before-drag-start")])),_:1}),Ue,g(o,{level:4,id:"after-drop"},{default:p((()=>[h("after-drop")])),_:1}),Ge,g(o,{level:4,id:"change"},{default:p((()=>[h("change")])),_:1}),Ke,g(o,{level:4,id:"enter"},{default:p((()=>[h("enter")])),_:1}),Ve,g(o,{level:4,id:"leave"},{default:p((()=>[h("leave")])),_:1}),Fe,g(o,{level:2,id:"others"},{default:p((()=>[h("Others")])),_:1}),g(o,{level:3,id:"stat"},{default:p((()=>[h("Stat")])),_:1}),We,g(r,{codeLanguage:"ts",code:"{\n  [x: string]: any // You can add any other keys to a stat.\n  data: T // Node data.\n  open: boolean // Is opened.\n  parent: Stat<T> | null // Parent stat.\n  children: Stat<T>[] // Children stats.\n  level: number // Level start from 1.\n  isStat: boolean // Detect if is stat object.\n  hidden: boolean // If hidden.\n  checked: boolean | 0 // If checked. 0 mean just some children checked.\n  draggable: boolean | null // null means inherit parent.\n  droppable: boolean | null // null means inherit parent.\n  style: any // Customize node style. Vue's style format.\n  class: any // Customize node class name. Vue's class format.\n}\n"}),g(o,{level:3,id:"dragcontext"},{default:p((()=>[h("dragContext")])),_:1}),Ye,g(r,{codeLanguage:"ts",code:"// vue3\nimport { dragContext } from '@he-tree/vue'\n// vue2\nimport { dragContext } from '@he-tree/vue/vue2'\n"}),g(o,{level:4,id:"startinfo"},{default:p((()=>[h("startInfo")])),_:1}),qe,g(o,{level:4,id:"targetinfo"},{default:p((()=>[h("targetInfo")])),_:1}),Je,g(o,{level:4,id:"dragnode-1"},{default:p((()=>[h("dragNode")])),_:1}),Qe,g(o,{level:4,id:"starttree"},{default:p((()=>[h("startTree")])),_:1}),Xe,g(o,{level:4,id:"targettree"},{default:p((()=>[h("targetTree")])),_:1}),Ze,g(o,{level:4,id:"example---dragcontext"},{default:p((()=>[h("Example - dragContext")])),_:1}),$e,g(v),g(o,{level:3,id:"startinfo-1"},{default:p((()=>[h("StartInfo")])),_:1}),g(r,{codeLanguage:"ts",code:"{\n  tree: DraggableTreeType; // Draggable component instance.\n  dragNode: Stat<any>; // The dragging node.\n  parent: Stat<any> | null; // Parent of dragging node.\n  siblings: Stat<any>[]; // Siblings of dragging node.\n  indexBeforeDrop: number; // Index of dragging node before drop.\n}\n"})])])}]]))}}}));
