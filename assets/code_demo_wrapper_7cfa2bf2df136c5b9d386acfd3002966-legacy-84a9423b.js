System.register(["./CodeContainer-legacy-9e5acd0c.js","./index-legacy-be5d2fb8.js","./material-design-legacy-25d5817e.js"],(function(e,t){"use strict";var n,d,o,a,r,l,s,c,i,p,u,h,g,b,x,m,f,k;return{setters:[e=>{n=e.C},e=>{d=e._,o=e.j,a=e.O,r=e.r,l=e.o,s=e.c,c=e.b,i=e.w,p=e.k,u=e.l,h=e.m,g=e.a,b=e.v,x=e.t,m=e.p,f=e.n,k=e.q},null],execute:function(){var t=document.createElement("style");t.textContent=".actions[data-v-ea946d7c]{margin-top:10px;border-top:1px solid #ccc;padding-top:10px}button[data-v-ea946d7c]{border:1px solid #ccc;padding:2px 5px;border-radius:5px;margin-right:8px;margin-bottom:5px;font-size:small}\n",document.head.appendChild(t);const D={components:{Draggable:o,OpenIcon:a},data:()=>({treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}]}),methods:{notify(){alert("Outputed to browser console, please check")},addAppendToFirstNode(){this.$refs.tree.add({text:"new node"},this.$refs.tree.rootChildren[0],this.$refs.tree.rootChildren[0].children.length)},addAfterSecondNode(){this.$refs.tree.add({text:"new node"},null,2)},addNestedNewNodes(){this.$refs.tree.add({text:"new parent",children:[{text:"new child"}]},null,2)},addMulti(){this.$refs.tree.addMulti([{text:"addMulti1"},{text:"addMulti2"}],this.$refs.tree.rootChildren[1],0)},batchUpdate(){this.$refs.tree.batchUpdate((()=>{this.addAppendToFirstNode(),this.addMulti()}))},getChecked(e){console.log(this.$refs.tree.getChecked(e)),this.notify()},getDataAll(){console.log(this.$refs.tree.getData()),this.notify()},getDataFirstNode(){console.log(this.$refs.tree.getData(null,this.$refs.tree.rootChildren[0])),this.notify()}}},C=e=>(m("data-v-ea946d7c"),e=e(),f(),e),N=["onUpdate:modelValue"],$={class:"mtl-ml"},A={class:"actions"},v=C((()=>g("br",null,null,-1))),y=C((()=>g("br",null,null,-1))),w=C((()=>g("br",null,null,-1)));e("i",d({components:{CodeContainer:n,Demo:d(D,[["render",function(e,t,n,d,o,a){const m=r("OpenIcon"),f=r("Draggable");return l(),s("div",null,[c(f,{ref:"tree",class:"mtl-tree",modelValue:o.treeData,"onUpdate:modelValue":t[0]||(t[0]=e=>o.treeData=e),treeLine:""},{default:i((({node:e,stat:t})=>[t.children.length?(l(),p(m,{key:0,open:t.open,class:"mtl-mr",onClick:e=>t.open=!t.open},null,8,["open","onClick"])):u("",!0),h(g("input",{class:"mtl-checkbox mtl-mr",type:"checkbox","onUpdate:modelValue":e=>t.checked=e},null,8,N),[[b,t.checked]]),g("span",$,x(e.text),1)])),_:1},8,["modelValue"]),g("div",A,[g("button",{onClick:t[1]||(t[1]=e=>a.addAppendToFirstNode())},"add: append to first node"),g("button",{onClick:t[2]||(t[2]=e=>a.addAfterSecondNode())},"add: after second node"),g("button",{onClick:t[3]||(t[3]=e=>a.addNestedNewNodes())},"add: nested new nodes"),g("button",{onClick:t[4]||(t[4]=e=>a.addMulti())},"addMulti"),v,g("button",{onClick:t[5]||(t[5]=e=>a.batchUpdate())},"batchUpdate"),y,g("button",{onClick:t[6]||(t[6]=t=>e.$refs.tree.closeAll())},"closeAll"),g("button",{onClick:t[7]||(t[7]=t=>e.$refs.tree.openAll())},"openAll"),g("button",{onClick:t[8]||(t[8]=t=>e.$refs.tree.openNodeAndParents(o.treeData[0].children[0].children[1].children[0]))}," openNodeAndParents "),g("button",{onClick:t[9]||(t[9]=e=>a.getChecked())},"getChecked"),g("button",{onClick:t[10]||(t[10]=e=>a.getChecked(!0))},"getChecked(true)"),w,g("button",{onClick:t[11]||(t[11]=e=>a.getDataAll())},"getData: all"),g("button",{onClick:t[12]||(t[12]=e=>a.getDataFirstNode())},"getData: first node")])])}],["__scopeId","data-v-ea946d7c"]])},data:()=>({code:'<template>\n  <div>\n    <Draggable ref="tree" class="mtl-tree" v-model="treeData" treeLine\n      ><template #default="{ node, stat }">\n        <OpenIcon\n          v-if="stat.children.length"\n          :open="stat.open"\n          class="mtl-mr"\n          @click.native="stat.open = !stat.open"\n        />\n        <input\n          class="mtl-checkbox mtl-mr"\n          type="checkbox"\n          v-model="stat.checked"\n        />\n        <span class="mtl-ml">{{ node.text }}</span>\n      </template></Draggable\n    >\n    <div class="actions">\n      <button @click="addAppendToFirstNode()">add: append to first node</button>\n      <button @click="addAfterSecondNode()">add: after second node</button>\n      <button @click="addNestedNewNodes()">add: nested new nodes</button>\n      <button @click="addMulti()">addMulti</button>\n      <br />\n      <button @click="batchUpdate()">batchUpdate</button>\n      <br />\n      <button @click="$refs.tree.closeAll()">closeAll</button>\n      <button @click="$refs.tree.openAll()">openAll</button>\n      <button\n        @click="\n          $refs.tree.openNodeAndParents(\n            treeData[0].children[0].children[1].children[0]\n          )\n        "\n      >\n        openNodeAndParents\n      </button>\n      <button @click="getChecked()">getChecked</button>\n      <button @click="getChecked(true)">getChecked(true)</button>\n      <br />\n      <button @click="getDataAll()">getData: all</button>\n      <button @click="getDataFirstNode()">getData: first node</button>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro, OpenIcon } from \'@he-tree/vue\'\n  import \'@he-tree/vue/style/default.css\'\n  import \'@he-tree/vue/style/material-design.css\'\n\n  export default {\n    components: { Draggable, OpenIcon },\n    data() {\n      return {\n        treeData: [\n          {\n            text: \'Projects\',\n            children: [\n              {\n                text: \'Frontend\',\n                children: [\n                  {\n                    text: \'Vue\',\n                    children: [\n                      {\n                        text: \'Nuxt\',\n                      },\n                    ],\n                  },\n                  {\n                    text: \'React\',\n                    children: [\n                      {\n                        text: \'Next\',\n                      },\n                    ],\n                  },\n                  {\n                    text: \'Angular\',\n                  },\n                ],\n              },\n              {\n                text: \'Backend\',\n              },\n            ],\n          },\n          { text: \'Photos\' },\n          { text: \'Videos\' },\n        ],\n      }\n    },\n    methods: {\n      notify() {\n        alert(`Outputed to browser console, please check`)\n      },\n      addAppendToFirstNode() {\n        this.$refs.tree.add(\n          { text: \'new node\' },\n          this.$refs.tree.rootChildren[0],\n          this.$refs.tree.rootChildren[0].children.length\n        )\n      },\n      addAfterSecondNode() {\n        this.$refs.tree.add({ text: \'new node\' }, null, 2)\n      },\n      addNestedNewNodes() {\n        this.$refs.tree.add(\n          { text: \'new parent\', children: [{ text: \'new child\' }] },\n          null,\n          2\n        )\n      },\n      addMulti() {\n        // nested new nodes supported\n        this.$refs.tree.addMulti(\n          [{ text: \'addMulti1\' }, { text: \'addMulti2\' }],\n          this.$refs.tree.rootChildren[1],\n          0\n        )\n      },\n      batchUpdate() {\n        this.$refs.tree.batchUpdate(() => {\n          this.addAppendToFirstNode()\n          this.addMulti()\n        })\n      },\n      getChecked(withDemi) {\n        console.log(this.$refs.tree.getChecked(withDemi))\n        this.notify()\n      },\n      getDataAll() {\n        console.log(this.$refs.tree.getData())\n        this.notify()\n      },\n      getDataFirstNode() {\n        console.log(\n          this.$refs.tree.getData(null, this.$refs.tree.rootChildren[0])\n        )\n        this.notify()\n      },\n    },\n  }\n<\/script>\n<style scoped>\n  .actions {\n    margin-top: 10px;\n    border-top: 1px solid #ccc;\n    padding-top: 10px;\n  }\n  button {\n    border: 1px solid #ccc;\n    padding: 2px 5px;\n    border-radius: 5px;\n    margin-right: 8px;\n    margin-bottom: 5px;\n    font-size: small;\n  }\n</style>'})},[["render",function(e,t,n,d,o,a){const s=r("Demo"),u=r("CodeContainer");return l(),p(u,{code:o.code,demo:"",codeLanguage:"vue"},{default:i((()=>[c(s)])),_:1},8,["code"])}]])),e("a",d({components:{CodeContainer:n,Demo:d({components:{Draggable:o},data:()=>({treeData:[{text:"1"},{text:"2"},{text:"3"},{text:"4"},{text:"5"},{text:"6"}]}),methods:{eachDroppable(e){const t=e=>parseInt(e)%2==1;return t(e.data.text)===t(k.dragNode.data.text)}}},[["render",function(e,t,n,d,o,a){const s=r("Draggable");return l(),p(s,{ref:"tree",modelValue:o.treeData,"onUpdate:modelValue":t[0]||(t[0]=e=>o.treeData=e),eachDroppable:a.eachDroppable},null,8,["modelValue","eachDroppable"])}]])},data:()=>({code:"<template>\n  <Draggable ref=\"tree\" v-model=\"treeData\" :eachDroppable=\"eachDroppable\" />\n</template>\n\n<script>\n  import { Draggable, dragContext } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { Draggable },\n    data() {\n      return {\n        treeData: [\n          { text: '1' },\n          { text: '2' },\n          { text: '3' },\n          { text: '4' },\n          { text: '5' },\n          { text: '6' },\n        ],\n      }\n    },\n    methods: {\n      eachDroppable(targetStat) {\n        const isOdd = (n) => parseInt(n) % 2 === 1\n        return (\n          isOdd(targetStat.data.text) === isOdd(dragContext.dragNode.data.text)\n        )\n      },\n    },\n  }\n<\/script>"})},[["render",function(e,t,n,d,o,a){const s=r("Demo"),u=r("CodeContainer");return l(),p(u,{code:o.code,demo:"",codeLanguage:"vue"},{default:i((()=>[c(s)])),_:1},8,["code"])}]]))}}}));
