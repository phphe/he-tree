System.register(["./code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28-legacy-337a4c0a.js","./code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1-legacy-6cacf746.js","./index-legacy-be5d2fb8.js","./CodeContainer-legacy-9e5acd0c.js","./material-design-legacy-25d5817e.js"],(function(e,l){"use strict";var d,a,n,t,r,o,i,u,c,p,v,s,f,_,h,m,b,g,H,z,D,x;return{setters:[e=>{d=e.i,a=e.a,n=e.b,t=e.c,r=e.d,o=e.e},e=>{i=e.i},e=>{u=e._,c=e.g,p=e.u,v=e.f,s=e.h,f=e.r,_=e.c,h=e.a,m=e.b,b=e.w,g=e.e,H=e.i,z=e.o},e=>{D=e._,x=e.C},null],execute:function(){const l={extends:D,components:{CodeContainer:x,inject___compiled_docs_code_demo_wrapper_d36d98bbcf8569d5c5210b3a9df1a740_vue_6f41399e7eb4b0127d1b0e15d8812377:d,inject___compiled_docs_code_demo_wrapper_e337fbaac4327c954de28e8177b76c90_vue_2c3ec87f7bd923c3a0c2bfe9cff7aa12:a,inject___compiled_docs_code_demo_wrapper_da1ef69c9a488b0e9121ee559ddf78e8_vue_a8b22232c4e4ef5e42aa758cc6cd557a:n,inject___compiled_docs_code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1_vue_5094dc6d301c1386515831df2c679ccf:i,inject___compiled_docs_code_demo_wrapper_b3898d371eeafb16cd3797411374b4d4_vue_6d264fbe43b3a84b74f1ff783f0a8b3c:t,inject___compiled_docs_code_demo_wrapper_b427f16e24d854be6a2c2c40abf9ef38_vue_cc98fbcfbd4f29b9e1a59b31c6acac77:r,inject___compiled_docs_code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28_vue_06abbe73a299eada51f087eb53fc07a1:o},setup(){const e=c(),l={name:"使用指南",id:"使用指南",level:1,children:[{name:"安装",id:"安装",level:2,children:[{name:"CDN",id:"cdn",level:3,children:[]}]},{name:"引入",id:"引入",level:2,children:[{name:"Vue3",id:"vue3",level:3,children:[]},{name:"Vue2",id:"vue2",level:3,children:[]}]},{name:"示例",id:"示例",level:2,children:[{name:"示例项目",id:"示例项目",level:3,children:[]},{name:"基础",id:"基础",level:3,children:[]},{name:"折叠与勾选框",id:"折叠与勾选框",level:3,children:[]},{name:"拖拽",id:"拖拽",level:3,children:[]},{name:"简单样式 Material Design 和连接线",id:"简单样式-material-design-和连接线",level:3,children:[]}]},{name:"节点缩进",id:"节点缩进",level:2,children:[]},{name:"数据",id:"数据",level:2,children:[]},{name:"数据更新(内部行为)",id:"数据更新内部行为",level:2,children:[{name:"Vuex 例子",id:"vuex-例子",level:3,children:[]}]},{name:"数据修改(外部操作)",id:"数据修改外部操作",level:2,children:[]},{name:"Material Design (预置样式)",id:"material-design-预置样式",level:2,children:[]},{name:"Tree Line (连接线)",id:"tree-line-连接线",level:2,children:[]},{name:"虚拟列表",id:"虚拟列表",level:2,children:[]},{name:"遍历树形数据",id:"遍历树形数据",level:2,children:[]},{name:"默认展开所有节点",id:"默认展开所有节点",level:2,children:[]},{name:"从右到左显示",id:"从右到左显示",level:2,children:[]},{name:"从下到上显示",id:"从下到上显示",level:2,children:[]},{name:"渲染为表格",id:"渲染为表格",level:2,children:[]},{name:"拖拽相关",id:"拖拽相关",level:2,children:[{name:"自定义触发拖拽的元素",id:"自定义触发拖拽的元素",level:3,children:[]},{name:"拖拽控制/可拖拽/可拖放",id:"拖拽控制可拖拽可拖放",level:3,children:[]},{name:"拖拽时限制最大层数/深度",id:"拖拽时限制最大层数深度",level:3,children:[]},{name:"拖拽到节点上时打开该节点",id:"拖拽到节点上时打开该节点",level:3,children:[]},{name:"占位元素",id:"占位元素",level:3,children:[]},{name:"拖拽时相关信息",id:"拖拽时相关信息",level:3,children:[]},{name:"外部拖入",id:"外部拖入",level:3,children:[]}]},{name:"触摸 & 移动设备",id:"触摸--移动设备",level:2,children:[]},{name:"水印",id:"水印",level:2,children:[]},{name:"Pro",id:"pro",level:2,children:[]}]}||{};p(l.name,e),v.value=l.children||[],s((()=>{v.value=null}))}},k={class:"docs-view"},T={class:"article mt-14 mb-8 prose"},y=h("p",null,[h("strong",null,"!!! 重要"),g(", 使用 Vue2 时，he-tree 在 Vue2.7 下不工作, 你可以复制这个示例文件夹来开始你的项目: "),h("a",{href:"https://github.com/phphe/he-tree/tree/dev/examples/example-vue2-no-ts"},"https://github.com/phphe/he-tree/tree/dev/examples/example-vue2-no-ts")],-1),L=h("ul",null,[h("li",null,[g("Vue3: "),h("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/iife/vue3.html"},"example")]),h("li",null,[g("Vue2: "),h("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/iife/vue2.html"},"example")])],-1),w=h("p",null,[h("code",null,"BaseTree"),g(" 是基础树组件. "),h("code",null,"Draggable"),g(" 组件继承于 "),h("code",null,"BaseTree"),g(".")],-1),j=h("ul",null,[h("li",null,[h("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/example-vue3/"},"he-tree + Vue3 + Vite + Typescript")]),h("li",null,[h("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/example-vue2/"},"he-tree + Vue2 + vue-cli + Typescript")])],-1),V=h("code",null,"stat.checked",-1),C=h("code",null,"true, false, 0",-1),A=h("code",null,"0",-1),P=h("code",null,"checked",-1),O=h("code",null,"0",-1),M=h("code",null,"checked",-1),S=h("p",null,[h("a",{name:"simpleStyleAndLine"})],-1),B=h("code",null,"children",-1),I=h("code",null,"text",-1),K=h("code",null,"v-model",-1),W=h("li",null,[g("modify: 直接修改绑定的数据对象. 例如当一个节点改变时，将修改此节点，而"),h("code",null,"v-model"),g("绑定的对象还是原对象。")],-1),F=h("li",null,[g("new: 提交一个新的数据对象, 适用于 vuex. "),h("code",null,"v-model"),g("绑定的对象将变为新对象。参考下一节的 vuex 例子。")],-1),N=h("code",null,"open",-1),U=h("code",null,"parent",-1),$=h("code",null,"children",-1),E=h("code",null,"level",-1),R=h("p",null,[h("a",{href:"#simpleStyleAndLine"},"代码和演示"),g("。库预置了简单样式，Material Design 风格。通过如下步骤启用：")],-1),Y=h("code",null,"mtl-tree",-1),q=h("li",null,[g("库包含一个折叠图标组件"),h("code",null,"OpenIcon"),g(", 你可以使用它作为你的折叠图标。"),h("code",null,"material-design.css"),g("包含一个简单的勾选框样式"),h("code",null,"mtl-checkbox"),g(", 你可以添加到勾选框上美化它。"),h("a",{href:"#simpleStyleAndLine"},"代码和演示"),g("。")],-1),G=h("a",{href:"#simpleStyleAndLine"},"代码和演示",-1),J=h("strong",null,"此功能在表格模式下无效。",-1),Q=h("p",null,"Tree Line 的样式可以通过 css 类控制。例如：",-1),X=h("code",null,"tree-line",-1),Z=h("code",null,"tree-vline",-1),ee=h("code",null,"tree-hline",-1),le=h("p",null,[g("虚拟列表由我的另一个库"),h("code",null,"virtual-list"),g("实现. "),h("a",{href:"https://github.com/phphe/virtual-list"},"virtual-list"),g(".")],-1),de=h("p",null,[g("使用"),h("code",null,"walkTreeData"),g("方法遍历树形数据。")],-1),ae=h("p",null,[g("树形数据示例, "),h("code",null,"childrenKey"),g("必须正确：")],-1),ne=h("p",null,"详细类型：",-1),te=H("<p><code>WalkTreeDataHandler</code> 返回不同的值的效果：</p><ul><li><code>false</code>: 停止遍历</li><li><code>skip children</code>: 跳过当前节点的子节点</li><li><code>skip siblings</code>: 跳过当前节点的同级节点</li><li>其他值: 无影响</li></ul><p><code>WalkTreeDataOptions</code>:</p><ul><li><code>childrenKey</code>: 树形数据子节点的<code>key</code>, 默认是<code>children</code>.</li><li><code>reverse</code>: 遍历节点数组时，从后往前遍历。</li><li><code>childFirst</code>: 先遍历子节点。</li></ul><p>例子，寻找所有 2 级节点：</p>",5),re=h("p",null,[g("表示拖拽时的可放置区域。拖拽时, 会生成一个元素默认淡蓝色背景, 用以标识可放置的位置. 使用插槽"),h("code",null,"placeholder"),g("控制它, 例如添加提示文字.")],-1),oe=h("p",null,[g("占位元素有类: "),h("code",null,"drag-placeholder"),g(". 可以使用这个类名自定义它的样式。")],-1),ie=h("p",null,"此组件基于 HTML5 Drag and Drop API, 所以在支持 Drag and Drop API 到移动设备上也能工作. 如果不支持, 可以尝试使设备兼容 Drag and Drop API 的库.",-1),ue=h("p",null,[h("strong",null,"注意"),g(": 触摸时, 用户需要触摸并等一会儿才能触发拖拽。")],-1),ce=h("strong",null,"此项默认关闭",-1),pe=h("li",null,[h("p",null,"跨树拖拽.")],-1),ve=h("li",null,[h("p",null,"拖拽开始时克隆原节点而不是移动原节点.")],-1),se=h("p",null,"可拖拽表格.",-1);e("default",u(l,[["render",function(e,l,d,a,n,t){const r=f("vheading"),o=f("CodeContainer"),i=f("inject___compiled_docs_code_demo_wrapper_d36d98bbcf8569d5c5210b3a9df1a740_vue_6f41399e7eb4b0127d1b0e15d8812377"),u=f("inject___compiled_docs_code_demo_wrapper_e337fbaac4327c954de28e8177b76c90_vue_2c3ec87f7bd923c3a0c2bfe9cff7aa12"),c=f("Anchor"),p=f("inject___compiled_docs_code_demo_wrapper_da1ef69c9a488b0e9121ee559ddf78e8_vue_a8b22232c4e4ef5e42aa758cc6cd557a"),v=f("inject___compiled_docs_code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1_vue_5094dc6d301c1386515831df2c679ccf"),s=f("inject___compiled_docs_code_demo_wrapper_b3898d371eeafb16cd3797411374b4d4_vue_6d264fbe43b3a84b74f1ff783f0a8b3c"),H=f("inject___compiled_docs_code_demo_wrapper_b427f16e24d854be6a2c2c40abf9ef38_vue_cc98fbcfbd4f29b9e1a59b31c6acac77"),D=f("inject___compiled_docs_code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28_vue_06abbe73a299eada51f087eb53fc07a1");return z(),_("div",k,[h("div",T,[m(r,{level:1,id:"使用指南"},{default:b((()=>[g("使用指南")])),_:1}),m(r,{level:2,id:"安装"},{default:b((()=>[g("安装")])),_:1}),m(o,{codeLanguage:"sh",code:"# Vue3\nnpm i --save @he-tree/vue\n# Vue2. 仅支持Vue@2.6\nnpm i --save @he-tree/vue @vue/composition-api\n"}),y,m(r,{level:3,id:"cdn"},{default:b((()=>[g("CDN")])),_:1}),L,m(r,{level:2,id:"引入"},{default:b((()=>[g("引入")])),_:1}),m(r,{level:3,id:"vue3"},{default:b((()=>[g("Vue3")])),_:1}),m(o,{codeLanguage:"ts",code:"import { BaseTree, Draggable } from '@he-tree/vue'\nimport '@he-tree/vue/style/default.css'\n"}),m(r,{level:3,id:"vue2"},{default:b((()=>[g("Vue2")])),_:1}),m(o,{codeLanguage:"ts",code:"import { BaseTree, Draggable } from '@he-tree/vue/vue2'\nimport '@he-tree/vue/style/default.css'\n"}),w,m(r,{level:2,id:"示例"},{default:b((()=>[g("示例")])),_:1}),m(r,{level:3,id:"示例项目"},{default:b((()=>[g("示例项目")])),_:1}),j,m(r,{level:3,id:"基础"},{default:b((()=>[g("基础")])),_:1}),m(i),m(r,{level:3,id:"折叠与勾选框"},{default:b((()=>[g("折叠与勾选框")])),_:1}),m(u),h("p",null,[g("仅提供折叠与勾选的逻辑, 你需要通过 Vue 插槽传入你自己的样式代码. 其中"),V,g(" 有 3 个值:"),C,g(". "),A,g("表示子级部分选中, 你可以用其确定半选状态. 当父节点勾选时，所有子节点将被勾选. 当所有子节点勾选时，父节点将被勾选。当部分子节点勾选时，父节点的"),P,g("值变为"),O,g(". 如果你需要其他勾选逻辑，不要死磕"),M,g(", 你可以在节点上增加一个其他属性来实现. 相关方法: "),m(c,{to:e.resolveHref("/zh/v2/api#getchecked"),underline:""},{default:b((()=>[g("getChecked")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#getunchecked"),underline:""},{default:b((()=>[g("getUnchecked")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#updatecheck"),underline:""},{default:b((()=>[g("updateCheck")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#openall"),underline:""},{default:b((()=>[g("openAll")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#closeall"),underline:""},{default:b((()=>[g("closeAll")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#isvisible"),underline:""},{default:b((()=>[g("isVisible")])),_:1},8,["to"]),g(".")]),m(r,{level:3,id:"拖拽"},{default:b((()=>[g("拖拽")])),_:1}),m(p),S,m(r,{level:3,id:"简单样式-material-design-和连接线"},{default:b((()=>[g("简单样式 Material Design 和连接线")])),_:1}),m(v),m(r,{level:2,id:"节点缩进"},{default:b((()=>[g("节点缩进")])),_:1}),h("p",null,[g("不要用 css 设置节点缩进, 而是用 prop "),m(c,{to:e.resolveHref("/zh/v2/api#indent"),underline:""},{default:b((()=>[g("indent")])),_:1},8,["to"]),g(".")]),m(r,{level:2,id:"数据"},{default:b((()=>[g("数据")])),_:1}),h("p",null,[g("数据为树形数据, 不支持平面数据. 平面数据需要你自行转换. 其中键名"),B,g("可以通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#childrenkey"),underline:""},{default:b((()=>[g("childrenKey")])),_:1},8,["to"]),g("修改, "),I,g("可以通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#textkey"),underline:""},{default:b((()=>[g("textKey")])),_:1},8,["to"]),g("修改. 例如:")]),m(o,{codeLanguage:"js",code:"{\n  text: 'Root',\n  children: [\n    {text: 'Child'}\n  ]\n}\n"}),m(r,{level:2,id:"数据更新内部行为"},{default:b((()=>[g("数据更新(内部行为)")])),_:1}),h("p",null,[g("可以使用"),K,g("绑定数据. 本组件会复制数据对象作为内部数据. 当内部数据变动时, 例如拖拽时, 有 3 种方式提交新数据到外部. 默认情况下直接修改绑定的数据对象的变动的局部. 通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#updatebehavior"),underline:""},{default:b((()=>[g("updateBehavior")])),_:1},8,["to"]),g("设置数据提交方式. updateBehavior 的值:")]),h("ul",null,[W,F,h("li",null,[g("disabled: 不提交. 你可以使用"),m(c,{to:e.resolveHref("/zh/v2/api#getdata"),underline:""},{default:b((()=>[g("getData")])),_:1},8,["to"]),g("方法手动生成并获取当前数据.")])]),m(r,{level:3,id:"vuex-例子"},{default:b((()=>[g("Vuex 例子")])),_:1}),m(o,{codeLanguage:"vue",code:"<template>\n  <YourTree v-model=\"treeData\" />\n</template>\n<script>\n  export default {\n    computed: {\n      treeData: {\n        get() {\n          return this.$store.state.treeData\n        },\n        set(value) {\n          this.$store.commit('updateTreeData', value)\n        },\n      },\n    },\n  }\n<\/script>\n"}),m(r,{level:2,id:"数据修改外部操作"},{default:b((()=>[g("数据修改(外部操作)")])),_:1}),h("p",null,[g("绑定的数据对象由外部改变时, 组件内部将会为每一个节点创建"),m(c,{to:e.resolveHref("/zh/v2/api#stat"),underline:""},{default:b((()=>[g("stat")])),_:1},8,["to"]),g("对象, 用来存储相关信息, 如 "),N,g(", "),U,g(", "),$,g(", "),E,g(". 可通过钩子 prop "),m(c,{to:e.resolveHref("/zh/v2/api#stathandler"),underline:""},{default:b((()=>[g("statHandler")])),_:1},8,["to"]),g(" 在 stat 创建之后修改每一个 stat. 相关 data: "),m(c,{to:e.resolveHref("/zh/v2/api#stats"),underline:""},{default:b((()=>[g("stats")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#statsflat"),underline:""},{default:b((()=>[g("statsFlat")])),_:1},8,["to"]),g(".")]),h("p",null,[g("操作数据的方法: "),m(c,{to:e.resolveHref("/zh/v2/api#getstat"),underline:""},{default:b((()=>[g("getStat")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#has"),underline:""},{default:b((()=>[g("has")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#updatecheck"),underline:""},{default:b((()=>[g("updateCheck")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#getchecked"),underline:""},{default:b((()=>[g("getChecked")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#getunchecked"),underline:""},{default:b((()=>[g("getUnchecked")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#openall"),underline:""},{default:b((()=>[g("openAll")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#closeall"),underline:""},{default:b((()=>[g("closeAll")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#opennodeandparents"),underline:""},{default:b((()=>[g("openNodeAndParents")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#isvisible"),underline:""},{default:b((()=>[g("isVisible")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#move"),underline:""},{default:b((()=>[g("move")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#add"),underline:""},{default:b((()=>[g("add")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#addmulti"),underline:""},{default:b((()=>[g("addMulti")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#remove"),underline:""},{default:b((()=>[g("remove")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#removemulti"),underline:""},{default:b((()=>[g("removeMulti")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#iterateparent"),underline:""},{default:b((()=>[g("iterateParent")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#getsiblings"),underline:""},{default:b((()=>[g("getSiblings")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#getdata"),underline:""},{default:b((()=>[g("getData")])),_:1},8,["to"]),g(".")]),m(r,{level:2,id:"material-design-预置样式"},{default:b((()=>[g("Material Design (预置样式)")])),_:1}),R,h("ul",null,[h("li",null,[g("引入 css"),m(o,{codeLanguage:"js",code:"import '@he-tree/vue/style/default.css'\nimport '@he-tree/vue/style/material-design.css'\n"})]),h("li",null,[g("添加 css 名："),Y,m(o,{codeLanguage:"html",code:'<Draggable class="mtl-tree" v-model="treeData" />\n'})]),q]),m(r,{level:2,id:"tree-line-连接线"},{default:b((()=>[g("Tree Line (连接线)")])),_:1}),h("p",null,[G,g("。使用 prop "),m(c,{to:e.resolveHref("/zh/v2/api#treeline"),underline:""},{default:b((()=>[g("treeLine")])),_:1},8,["to"]),g(" 启用它，使用 prop "),m(c,{to:e.resolveHref("/zh/v2/api#treelineoffset"),underline:""},{default:b((()=>[g("treeLineOffset")])),_:1},8,["to"]),g(" 设置位移。"),J]),Q,h("ul",null,[h("li",null,[X,g(": 可以设置 Tree Line 的颜色。"),m(o,{codeLanguage:"css",code:".your-tree .tree-line {\n  background: red;\n}\n"})]),h("li",null,[Z,g(": 可以设置 Tree Line 竖线的颜色，宽度。"),m(o,{codeLanguage:"css",code:".your-tree .tree-vline {\n  background: red;\n  width: 1px;\n}\n"})]),h("li",null,[ee,g(": 可以设置 Tree Line 横线的颜色，宽度。"),m(o,{codeLanguage:"css",code:".your-tree .tree-hline {\n  background: red;\n  height: 1px;\n  width: 10px;\n}\n"})])]),m(r,{level:2,id:"虚拟列表"},{default:b((()=>[g("虚拟列表")])),_:1}),m(s),h("p",null,[g("使用虚拟列表时需要给树或其父元素设置高度, 否则会自动扩展高度为最大. 相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#virtualization"),underline:""},{default:b((()=>[g("virtualization")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#virtualizationprerendercount"),underline:""},{default:b((()=>[g("virtualizationPrerenderCount")])),_:1},8,["to"])]),le,m(r,{level:2,id:"遍历树形数据"},{default:b((()=>[g("遍历树形数据")])),_:1}),de,m(o,{codeLanguage:"js",code:"// Vue3\nimport { walkTreeData } from '@he-tree/vue'\n// Vue2\nimport { walkTreeData } from '@he-tree/vue/vue2'\n\nwalkTreeData(node, (node, index, parent) => {}, {\n  childrenKey: 'children',\n  reverse: false,\n  childFirst: false,\n})\n"}),ae,m(o,{codeLanguage:"js",code:"let treeData1 = { a: 1, children: [{ b: 1 }] }\nlet treeData2 = [{ a: 1, children: [{ b: 1 }] }, { c: 1 }]\nlet treeData3 = { a: 1, sub: [{ b: 1 }] }\n"}),ne,m(o,{codeLanguage:"ts",code:"declare function walkTreeData<T extends Object>(\n  obj: T | T[],\n  handler: WalkTreeDataHandler<T>,\n  opt?: WalkTreeDataOptions\n): void\ndeclare type WalkTreeDataHandler<T> = (\n  node: T,\n  index: number,\n  parent: T | null,\n  path: TreeDataPath\n) => void | false | 'skip children' | 'skip siblings'\ndeclare type WalkTreeDataOptions = {\n  childrenKey?: string\n  reverse?: boolean\n  childFirst?: boolean\n}\n"}),te,m(o,{codeLanguage:"js",code:"let results = []\nwalkTreeData(tree.rootChildren, (stat) => {\n  if (stat.level === 2) {\n    results.push(stat)\n    return `skip children`\n  }\n})\n"}),m(r,{level:2,id:"默认展开所有节点"},{default:b((()=>[g("默认展开所有节点")])),_:1}),h("p",null,[g("相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#defaultopen"),underline:""},{default:b((()=>[g("defaultOpen")])),_:1},8,["to"])]),m(r,{level:2,id:"从右到左显示"},{default:b((()=>[g("从右到左显示")])),_:1}),h("p",null,[g("相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#rtl"),underline:""},{default:b((()=>[g("rtl")])),_:1},8,["to"])]),m(r,{level:2,id:"从下到上显示"},{default:b((()=>[g("从下到上显示")])),_:1}),h("p",null,[g("相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#btt"),underline:""},{default:b((()=>[g("btt")])),_:1},8,["to"])]),m(H),m(r,{level:2,id:"渲染为表格"},{default:b((()=>[g("渲染为表格")])),_:1}),m(D),h("p",null,[g("支持虚拟列表与表格同时工作. 相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#table"),underline:""},{default:b((()=>[g("table")])),_:1},8,["to"]),g(". 通过插槽 "),m(c,{to:e.resolveHref("/zh/v2/api#prepend"),underline:""},{default:b((()=>[g("prepend")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#append"),underline:""},{default:b((()=>[g("append")])),_:1},8,["to"]),g(" 添加表头和表底部. 表格拖拽为高级功能, 需购买"),m(c,{to:e.resolveHref("/zh/pro"),underline:""},{default:b((()=>[g("pro")])),_:1},8,["to"]),g("启用.")]),m(r,{level:2,id:"拖拽相关"},{default:b((()=>[g("拖拽相关")])),_:1}),m(r,{level:3,id:"自定义触发拖拽的元素"},{default:b((()=>[g("自定义触发拖拽的元素")])),_:1}),h("p",null,[g("相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#triggerclass"),underline:""},{default:b((()=>[g("triggerClass")])),_:1},8,["to"])]),m(r,{level:3,id:"拖拽控制可拖拽可拖放"},{default:b((()=>[g("拖拽控制/可拖拽/可拖放")])),_:1}),h("p",null,[g("可通过节点"),m(c,{to:e.resolveHref("/zh/v2/api#stat"),underline:""},{default:b((()=>[g("stat")])),_:1},8,["to"]),g("控制每个节点. 也可通过钩子函数控制. 相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#disabledrag"),underline:""},{default:b((()=>[g("disableDrag")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#disabledrop"),underline:""},{default:b((()=>[g("disableDrop")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#eachdraggable"),underline:""},{default:b((()=>[g("eachDraggable")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#eachdroppable"),underline:""},{default:b((()=>[g("eachDroppable")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#rootdroppable"),underline:""},{default:b((()=>[g("rootDroppable")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#maxlevel"),underline:""},{default:b((()=>[g("maxLevel")])),_:1},8,["to"])]),m(r,{level:3,id:"拖拽时限制最大层数深度"},{default:b((()=>[g("拖拽时限制最大层数/深度")])),_:1}),h("p",null,[g("相关 props: "),m(c,{to:e.resolveHref("/zh/v2/api#maxlevel"),underline:""},{default:b((()=>[g("maxLevel")])),_:1},8,["to"])]),m(r,{level:3,id:"拖拽到节点上时打开该节点"},{default:b((()=>[g("拖拽到节点上时打开该节点")])),_:1}),h("p",null,[g("当把节点拖动到一个折叠节点上时, 默认会打开此节点以便拖入其中. 可通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#dragopen"),underline:""},{default:b((()=>[g("dragOpen")])),_:1},8,["to"]),g("控制. 可通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#dragopendelay"),underline:""},{default:b((()=>[g("dragOpenDelay")])),_:1},8,["to"]),g("设置等待时间. 钩子 prop: "),m(c,{to:e.resolveHref("/zh/v2/api#beforedragopen"),underline:""},{default:b((()=>[g("beforeDragOpen")])),_:1},8,["to"])]),m(r,{level:3,id:"占位元素"},{default:b((()=>[g("占位元素")])),_:1}),re,h("p",null,[g("拖拽时, 如果离开树, 占位元素将会被删掉, 如果此时停止拖拽, 树将恢复原状. 通过 prop "),m(c,{to:e.resolveHref("/zh/v2/api#keepplaceholder"),underline:""},{default:b((()=>[g("keepPlaceholder")])),_:1},8,["to"]),g("可使占位元素在拖拽结束前一直保留.")]),oe,m(r,{level:3,id:"拖拽时相关信息"},{default:b((()=>[g("拖拽时相关信息")])),_:1}),h("p",null,[g("拖拽时相关信息不在事件或钩子函数的参数里, 而是暴露为一个对象 "),m(c,{to:e.resolveHref("/zh/v2/api#dragcontext"),underline:""},{default:b((()=>[g("dragContext")])),_:1},8,["to"]),g(".")]),m(o,{codeLanguage:"ts",code:"// vue3\nimport { dragContext } from '@he-tree/vue'\n// vue2\nimport { dragContext } from '@he-tree/vue/vue2'\n"}),m(r,{level:3,id:"外部拖入"},{default:b((()=>[g("外部拖入")])),_:1}),h("p",null,[g("外部拖入指外部的信息通过 Drag and Drop API 拖入树内. 可以通过钩子 props: "),m(c,{to:e.resolveHref("/zh/v2/api#onexternaldragover"),underline:""},{default:b((()=>[g("onExternalDragOver")])),_:1},8,["to"]),g(", "),m(c,{to:e.resolveHref("/zh/v2/api#externaldatahandler"),underline:""},{default:b((()=>[g("externalDataHandler")])),_:1},8,["to"]),g(" 处理这一情况. 以此可实现与任何组件通过 Drag and Drop API 互通.")]),m(r,{level:2,id:"触摸--移动设备"},{default:b((()=>[g("触摸 & 移动设备")])),_:1}),ie,ue,m(r,{level:2,id:"水印"},{default:b((()=>[g("水印")])),_:1}),h("p",null,[ce,g("。 此组件会在浏览器控制台输出一条水印信息. 可使用 prop "),m(c,{to:e.resolveHref("/zh/v2/api#watermark"),underline:""},{default:b((()=>[g("watermark")])),_:1},8,["to"]),g("关闭.")]),m(r,{level:2,id:"pro"},{default:b((()=>[g("Pro")])),_:1}),h("p",null,[m(c,{to:e.resolveHref("/zh/pro"),underline:""},{default:b((()=>[g("pro")])),_:1},8,["to"]),g(" 有以下高级功能.")]),h("ul",null,[pe,ve,h("li",null,[se,h("p",null,[g("详情"),m(c,{to:e.resolveHref("/zh/pro"),underline:""},{default:b((()=>[g("请点击")])),_:1},8,["to"]),g(".")])])])])])}]]))}}}));
