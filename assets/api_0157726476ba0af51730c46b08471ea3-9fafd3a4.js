import{i as p,a as g}from"./code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966-37bd7131.js";import{_,g as f,u as m,f as s,h as v,r as o,c as b,a as n,b as t,w as l,e,i as y,o as x}from"./index-86792da5.js";import{_ as w,C as k}from"./CodeContainer-bc270f09.js";/* empty css                        */const S={extends:w,components:{CodeContainer:k,inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532:p,inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662:g},setup(){const r=f(),i={name:"API",id:"api",level:1,children:[{name:"BaseTree",id:"basetree",level:2,children:[{name:"props",id:"props",level:3,children:[{name:"btt",id:"btt",level:4,children:[]},{name:"childrenKey",id:"childrenkey",level:4,children:[]},{name:"defaultOpen",id:"defaultopen",level:4,children:[]},{name:"indent",id:"indent",level:4,children:[]},{name:"nodeKey",id:"nodekey",level:4,children:[]},{name:"rtl",id:"rtl",level:4,children:[]},{name:"statHandler",id:"stathandler",level:4,children:[]},{name:"table",id:"table",level:4,children:[]},{name:"textKey",id:"textkey",level:4,children:[]},{name:"updateBehavior",id:"updatebehavior",level:4,children:[]},{name:"virtualization",id:"virtualization",level:4,children:[]},{name:"virtualizationPrerenderCount",id:"virtualizationprerendercount",level:4,children:[]},{name:"treeLine",id:"treeline",level:4,children:[]},{name:"treeLineOffset",id:"treelineoffset",level:4,children:[]},{name:"watermark",id:"watermark",level:4,children:[]}]},{name:"data",id:"data",level:3,children:[{name:"dragNode",id:"dragnode",level:4,children:[]},{name:"dragOvering",id:"dragovering",level:4,children:[]},{name:"self",id:"self",level:4,children:[]},{name:"stats",id:"stats",level:4,children:[]},{name:"statsFlat",id:"statsflat",level:4,children:[]}]},{name:"computed",id:"computed",level:3,children:[{name:"rootChildren",id:"rootchildren",level:4,children:[]}]},{name:"methods",id:"methods",level:3,children:[{name:"methods examples",id:"methods-examples",level:4,children:[]},{name:"add",id:"add",level:4,children:[]},{name:"addMulti",id:"addmulti",level:4,children:[]},{name:"batchUpdate",id:"batchupdate",level:4,children:[]},{name:"closeAll",id:"closeall",level:4,children:[]},{name:"getChecked",id:"getchecked",level:4,children:[]},{name:"getData",id:"getdata",level:4,children:[]},{name:"getRootEl",id:"getrootel",level:4,children:[]},{name:"getSiblings",id:"getsiblings",level:4,children:[]},{name:"getStat",id:"getstat",level:4,children:[]},{name:"getUnchecked",id:"getunchecked",level:4,children:[]},{name:"has",id:"has",level:4,children:[]},{name:"isVisible",id:"isvisible",level:4,children:[]},{name:"iterateParent",id:"iterateparent",level:4,children:[]},{name:"move",id:"move",level:4,children:[]},{name:"openAll",id:"openall",level:4,children:[]},{name:"openNodeAndParents",id:"opennodeandparents",level:4,children:[]},{name:"remove",id:"remove",level:4,children:[]},{name:"removeMulti",id:"removemulti",level:4,children:[]},{name:"updateCheck",id:"updatecheck",level:4,children:[]}]},{name:"events",id:"events",level:3,children:[{name:"check:node",id:"checknode",level:4,children:[]},{name:"click:node",id:"clicknode",level:4,children:[]},{name:"close:node",id:"closenode",level:4,children:[]},{name:"open:node",id:"opennode",level:4,children:[]}]},{name:"slots",id:"slots",level:3,children:[{name:"default",id:"default",level:4,children:[]},{name:"placeholder",id:"placeholder",level:4,children:[]},{name:"prepend",id:"prepend",level:4,children:[]},{name:"append",id:"append",level:4,children:[]}]}]},{name:"Draggable",id:"draggable",level:2,children:[{name:"props",id:"props-1",level:3,children:[{name:"beforeDragOpen",id:"beforedragopen",level:4,children:[]},{name:"disableDrag",id:"disabledrag",level:4,children:[]},{name:"disableDrop",id:"disabledrop",level:4,children:[]},{name:"dragOpen",id:"dragopen",level:4,children:[]},{name:"dragOpenDelay",id:"dragopendelay",level:4,children:[]},{name:"eachDraggable",id:"eachdraggable",level:4,children:[]},{name:"eachDroppable",id:"eachdroppable",level:4,children:[]},{name:"externalDataHandler",id:"externaldatahandler",level:4,children:[]},{name:"keepPlaceholder",id:"keepplaceholder",level:4,children:[]},{name:"maxLevel",id:"maxlevel",level:4,children:[]},{name:"onExternalDragOver",id:"onexternaldragover",level:4,children:[]},{name:"resolveStartMovePoint",id:"resolvestartmovepoint",level:4,children:[]},{name:"rootDroppable",id:"rootdroppable",level:4,children:[]},{name:"triggerClass",id:"triggerclass",level:4,children:[]}]},{name:"methods",id:"methods-1",level:3,children:[{name:"getNodeByElement",id:"getnodebyelement",level:4,children:[]},{name:"isDraggable",id:"isdraggable",level:4,children:[]},{name:"isDroppable",id:"isdroppable",level:4,children:[]},{name:"ondragstart",id:"ondragstart",level:4,children:[]}]},{name:"events",id:"events-1",level:3,children:[{name:"before-drag-start",id:"before-drag-start",level:4,children:[]},{name:"after-drop",id:"after-drop",level:4,children:[]},{name:"change",id:"change",level:4,children:[]},{name:"enter",id:"enter",level:4,children:[]},{name:"leave",id:"leave",level:4,children:[]}]}]},{name:"Others",id:"others",level:2,children:[{name:"Stat",id:"stat",level:3,children:[]},{name:"dragContext",id:"dragcontext",level:3,children:[{name:"startInfo",id:"startinfo",level:4,children:[]},{name:"targetInfo",id:"targetinfo",level:4,children:[]},{name:"dragNode",id:"dragnode-1",level:4,children:[]},{name:"startTree",id:"starttree",level:4,children:[]},{name:"targetTree",id:"targettree",level:4,children:[]},{name:"Example - dragContext",id:"example---dragcontext",level:4,children:[]}]},{name:"StartInfo",id:"startinfo-1",level:3,children:[]}]}]};m(i.name,r),s.value=i.children||[],v(()=>{s.value=null})}},D={class:"docs-view"},L={class:"article mt-14 mb-8 prose"},T=y('<p><code>he-tree</code> exports 2 components: <a href="#basetree">BaseTree</a>, <a href="#draggable">Draggable</a>. BaseTree is the base tree component. Draggable extends BaseTree, it includes drag functions. Follow API is simply divided into two parts because of this.</p><p><code>Stat&lt;never&gt;</code>, <code>Stat&lt;unknown&gt;</code> in below are TypeScript format. <code>unknown</code>, <code>never</code>, <code>any</code> represent the node data of user. <code>Stat&lt;never&gt;</code> and <code>Stat&lt;unknown&gt;</code> are same, they mean the <a href="#Stat">stat</a> of a node.</p><p>The origin of all coordinates below is the upper left corner of the window. Such as the return value of <code>Element.getBoundingClientRect()</code>.</p>',3),P=n("p",null,"Tree start from bottom to top.",-1),C=n("p",null,[e("Replace "),n("code",null,"children"),e(" key in data.")],-1),I=n("p",null,"Open all nodes by default.",-1),E=n("p",null,[e("Node indent in "),n("code",null,"px"),e(".")],-1),j=n("p",null,[e("Use"),n("code",null,"index"),e(" or return a unique value as key for Vue loop.")],-1),O=n("p",null,"Display from right to left.",-1),A=n("p",null,[e("Hook method. Handle each "),n("a",{href:"#Stat"},"stat"),e(" after each stat created.")],-1),B=n("p",null,"Render as table.",-1),N=n("p",null,[e("Replace "),n("code",null,"text"),e(" key in data. It is only used in default slot. If you provide your ui code, it may be unused.")],-1),H=n("p",null,"The way of emit new data when inner data changed.",-1),M=n("li",null,"modify: default. Modify binded data.",-1),z=n("li",null,"new: emit a new data, suits for for vuex.",-1),R=n("p",null,"Enable virtual list.",-1),U=n("p",null,"The number of rendered list items at start. Suits for SSR(Server Side Render).",-1),V=n("p",null,[e("Display tree line. "),n("strong",null,"This feature is not valid in table mode.")],-1),G=n("p",null,"Horizontal displacement of tree lines, unit: pixels.",-1),K=n("p",null,"Print a watermark information to browser console.",-1),$=n("p",null,"The dragging node stat.",-1),F=n("p",null,"The tree is being drag overing.",-1),W=n("p",null,"Tree instance.",-1),Y=n("p",null,"All stats, tree structure.",-1),q=n("p",null,"All stats, flat structure.",-1),J=n("p",null,"The top-level nodes' stats. Can be considered as a subset of a non-existent root node.",-1),Q=n("p",null,"Some methods' examples. Click top right icon to view source code.",-1),X=n("p",null,[e("Add node. parent is null means root. "),n("a",{href:"#methods-examples"},"Example")],-1),Z=n("p",null,[e("Add multiple continuously nodes. parent is null means root. "),n("a",{href:"#methods-examples"},"Example")],-1),ee=n("p",null,[e("Merge multiple data update actions, to make it only emit new data once. "),n("a",{href:"#methods-examples"},"Example")],-1),te=n("p",null,[e("Close all nodes. "),n("a",{href:"#methods-examples"},"Example")],-1),ne=n("p",null,[e("Get all checked nodes. Param "),n("code",null,"withDemi"),e(" means including half checked. "),n("a",{href:"#methods-examples"},"Example")],-1),le=n("p",null,[e("Generate and get current data without stat. Param "),n("code",null,"filter"),e(" can handle each node data. "),n("a",{href:"#methods-examples"},"Example")],-1),ae=n("p",null,"Get the root element of the tree component.",-1),de=n("p",null,"Get all siblings of a node including it self.",-1),oe=n("p",null,[e("Get "),n("code",null,"stat"),e(" by node data.")],-1),re=n("p",null,[e("Get all unchecked nodes. Param "),n("code",null,"withDemi"),e(" means including half checked.")],-1),ie=n("p",null,"Detect the tree if has the stat of given node data.",-1),se=n("p",null,[e("Detect if node is visible. When parent invisible or closed, children are invisible. Param "),n("code",null,"statOrNodeData"),e(" can be node data or stat.")],-1),ce=n("p",null,[e("Iterate all parents of a node. Param "),n("code",null,"opt.withSelf"),e(" means including it self. E.g.:")],-1),ue=n("p",null,[e("Move node. parent is null means root. Similar to "),n("code",null,"add"),e(", check the example of "),n("code",null,"add"),e(": "),n("a",{href:"#methods-examples"},"Example")],-1),he=n("p",null,[e("Open all nodes. "),n("a",{href:"#methods-examples"},"Example")],-1),pe=n("p",null,[e("Open a node and its all parents to make it visible. The argument "),n("code",null,"nodeDataOrStat"),e(" can be node data or node stat. "),n("a",{href:"#methods-examples"},"Example")],-1),ge=n("p",null,"Remove node.",-1),_e=n("p",null,"Remove multiple nodes.",-1),fe=n("p",null,[e("Recalculate "),n("code",null,"checked"),e(" state of all nodes from end to root.")],-1),me=n("p",null,[e("Parameters: stat. Triggered when node "),n("code",null,"checked"),e(" changed.")],-1),ve=n("p",null,"Parameters: stat. Triggered when click node.",-1),be=n("p",null,"Parameters: stat. Triggered when close node.",-1),ye=n("p",null,"Parameters: stat. Triggered when open node.",-1),xe=n("p",null,"Can be used to customize node ui. Parameters:",-1),we=n("ul",null,[n("li",null,"node: node data"),n("li",null,"stat: runtime info of node"),n("li",null,"indentStyle: node indent style. Only when rendering as a table, user should apply it to a column, usually the first column."),n("li",null,"tree: tree instance.")],-1),ke=n("p",null,"Can be used to customize placeholder ui. Parameters:",-1),Se=n("ul",null,[n("li",null,"tree: tree instance.")],-1),De=n("p",null,"Start of root element inner. Used to add table head when render as table . Parameters:",-1),Le=n("ul",null,[n("li",null,"tree: tree instance.")],-1),Te=n("p",null,"End of root element inner. Used to add table foot when render as table. Parameters:",-1),Pe=n("ul",null,[n("li",null,"tree: tree instance.")],-1),Ce=n("p",null,"Hook method. Call before open node when drag over it. Promise supported.",-1),Ie=n("p",null,"Disable drag.",-1),Ee=n("p",null,"Disable drop.",-1),je=n("p",null,"Open node when drag over it.",-1),Oe=n("p",null,"Wait milliseconds before open node when drag over it.",-1),Ae=n("p",null,"Hook method. Control each node if is draggable. Child will inherit parent if not set.",-1),Be=n("p",null,"Hook method. Control each node if is droppable. Child will inherit parent if not set.",-1),Ne=n("p",null,"Call when external something dropped to the tree with Drag and Drop API. Tree will call it to create new node data.",-1),He=n("p",null,"Keep placeholder when drag leave a tree.",-1),Me=n("p",null,"If tree's max level will exceed this after drop, the drop will be prevented.",-1),ze=n("p",null,[e("Call when external something dragged over the tree with Drag and Drop API. Param "),n("code",null,"event"),e(" is "),n("code",null,"DragEvent"),e(" type of Drag and Drop API. Return "),n("code",null,"false"),e(" to ignore it.")],-1),Re=n("p",null,[e("The dragging node is think as a point. This means how to get the point. "),n("code",null,"default"),e(" is to get the top left of node . "),n("code",null,"mouse"),e(" is get mouse position. Or you can pass a method to return a coordinate: "),n("code",null,"{x:number,y:number}"),e(".")],-1),Ue=n("p",null,[e("Hook method. If the tree root is droppable. Default is "),n("code",null,"true"),e(".")],-1),Ve=n("p",null,"The trigger element css class. Default is the node self. Can be child element of node. A node can has multiple trigger elements.",-1),Ge=n("p",null,"Get node stat by HTML Element.",-1),Ke=n("p",null,"Detect if node draggable.",-1),$e=n("p",null,"Detect if node droppable.",-1),Fe=n("p",null,[e("A hook of dragstart event of HTML Drag and Drop API. You can use HTML Drag and Drop API's "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage"},"setDragImage"),e(" method to custom drag image. Refer issue: "),n("a",{href:"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535"},"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535")],-1),We=n("p",null,"Parameters: dragNode. Triggered before drag start.",-1),Ye=n("p",null,"Parameters: nothing. Triggered after drop. Only triggered on dropped tree.",-1),qe=n("p",null,"Parameters: nothing. Triggered after changed by drop. Triggered on both 2 trees when drag cross trees.",-1),Je=n("p",null,"Parameters: DragEvent. Triggered when drag enter a tree.",-1),Qe=n("p",null,"Parameters: DragEvent. Triggered when drag leave a tree.",-1),Xe=n("p",null,"Each node has a stat created by tree. It stores runtime info.",-1),Ze=n("p",null,[e("Runtime info when drag. "),n("a",{href:"#example---dragcontext"},"Example"),e(". including: startInfo, targetInfo, dragNode, startTree, targetTree. Import:")],-1),et=n("p",null,[e("Type: "),n("a",{href:"#StartInfo"},"StartInfo"),e(". Info about drag start.")],-1),tt=n("p",null,[e("Type: "),n("a",{href:"#StartInfo"},"StartInfo"),e(". Info about drag target.")],-1),nt=n("p",null,[e("Type: "),n("a",{href:"#Stat"},"Stat"),e(". The dragging node.")],-1),lt=n("p",null,"Draggable component instance. The tree drag start at.",-1),at=n("p",null,"Draggable component instance. Drag target tree.",-1),dt=n("p",null,[e("Use the dragContext to obtain the dragNode in "),n("a",{href:"#eachdroppable"},"eachDroppable"),e(" and achieve the following effect: odd nodes only accept odd nodes, even nodes only accept even nodes.")],-1);function ot(r,i,rt,it,st,ct){const a=o("vheading"),d=o("CodeContainer"),c=o("Anchor"),u=o("inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532"),h=o("inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662");return x(),b("div",D,[n("div",L,[t(a,{level:1,id:"api"},{default:l(()=>[e("API")]),_:1}),T,t(a,{level:2,id:"basetree"},{default:l(()=>[e("BaseTree")]),_:1}),t(a,{level:3,id:"props"},{default:l(()=>[e("props")]),_:1}),t(a,{level:4,id:"btt"},{default:l(()=>[e("btt")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),P,t(a,{level:4,id:"childrenkey"},{default:l(()=>[e("childrenKey")]),_:1}),t(d,{codeLanguage:"js",code:'{ type: String, default: "children" }\n'}),C,t(a,{level:4,id:"defaultopen"},{default:l(()=>[e("defaultOpen")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),I,t(a,{level:4,id:"indent"},{default:l(()=>[e("indent")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),E,t(a,{level:4,id:"nodekey"},{default:l(()=>[e("nodeKey")]),_:1}),j,t(d,{codeLanguage:"js",code:"{ type:  \"index\" | ((stat: Stat<any>, index: number) => any), default: 'index' }\n"}),t(a,{level:4,id:"rtl"},{default:l(()=>[e("rtl")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),O,t(a,{level:4,id:"stathandler"},{default:l(()=>[e("statHandler")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: (stat: Stat<any>) => Stat<any> }\n"}),A,t(a,{level:4,id:"table"},{default:l(()=>[e("table")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),B,t(a,{level:4,id:"textkey"},{default:l(()=>[e("textKey")]),_:1}),t(d,{codeLanguage:"js",code:'{ type: String, default: "text" }\n'}),N,t(a,{level:4,id:"updatebehavior"},{default:l(()=>[e("updateBehavior")]),_:1}),H,n("ul",null,[M,z,n("li",null,[e("disabled: do nothing. You can use "),t(c,{to:r.resolveHref("/v2/api#getdata"),underline:""},{default:l(()=>[e("getData")]),_:1},8,["to"]),e(" to generate and get current data.")])]),t(a,{level:4,id:"virtualization"},{default:l(()=>[e("virtualization")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),R,t(a,{level:4,id:"virtualizationprerendercount"},{default:l(()=>[e("virtualizationPrerenderCount")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),U,t(a,{level:4,id:"treeline"},{default:l(()=>[e("treeLine")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),V,t(a,{level:4,id:"treelineoffset"},{default:l(()=>[e("treeLineOffset")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Number, default: 8 }\n"}),G,t(a,{level:4,id:"watermark"},{default:l(()=>[e("watermark")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),K,t(a,{level:3,id:"data"},{default:l(()=>[e("data")]),_:1}),t(a,{level:4,id:"dragnode"},{default:l(()=>[e("dragNode")]),_:1}),$,t(a,{level:4,id:"dragovering"},{default:l(()=>[e("dragOvering")]),_:1}),F,t(a,{level:4,id:"self"},{default:l(()=>[e("self")]),_:1}),W,t(a,{level:4,id:"stats"},{default:l(()=>[e("stats")]),_:1}),t(d,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),Y,t(a,{level:4,id:"statsflat"},{default:l(()=>[e("statsFlat")]),_:1}),t(d,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),q,t(a,{level:3,id:"computed"},{default:l(()=>[e("computed")]),_:1}),t(a,{level:4,id:"rootchildren"},{default:l(()=>[e("rootChildren")]),_:1}),t(d,{codeLanguage:"ts",code:"type type = Stat<your_node_type>[]\n"}),J,t(a,{level:3,id:"methods"},{default:l(()=>[e("methods")]),_:1}),t(a,{level:4,id:"methods-examples"},{default:l(()=>[e("methods examples")]),_:1}),Q,t(u),t(a,{level:4,id:"add"},{default:l(()=>[e("add")]),_:1}),t(d,{codeLanguage:"ts",code:"(nodeData: unknown, parent?: Stat<unknown> | null | undefined, index?: number | null | undefined): void;\n"}),X,t(a,{level:4,id:"addmulti"},{default:l(()=>[e("addMulti")]),_:1}),t(d,{codeLanguage:"ts",code:"(\n  dataArr: any[],\n  parent?: Stat<any> | null,\n  startIndex?: number | null\n): void;\n"}),Z,t(a,{level:4,id:"batchupdate"},{default:l(()=>[e("batchUpdate")]),_:1}),t(d,{codeLanguage:"ts",code:"(task: () => any): void;\n"}),ee,t(a,{level:4,id:"closeall"},{default:l(()=>[e("closeAll")]),_:1}),t(d,{codeLanguage:"ts",code:"(): void\n"}),te,t(a,{level:4,id:"getchecked"},{default:l(()=>[e("getChecked")]),_:1}),t(d,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),ne,t(a,{level:4,id:"getdata"},{default:l(()=>[e("getData")]),_:1}),t(d,{codeLanguage:"ts",code:"(filter?: ((data: never) => never) | undefined, root?: Stat<never> | undefined): never[];\n"}),le,t(a,{level:4,id:"getrootel"},{default:l(()=>[e("getRootEl")]),_:1}),t(d,{codeLanguage:"ts",code:"(): HTMLElement;\n"}),ae,t(a,{level:4,id:"getsiblings"},{default:l(()=>[e("getSiblings")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<never>): Stat<never>[];\n"}),de,t(a,{level:4,id:"getstat"},{default:l(()=>[e("getStat")]),_:1}),t(d,{codeLanguage:"ts",code:"(nodeData: unknown): Stat<unknown>\n"}),oe,t(a,{level:4,id:"getunchecked"},{default:l(()=>[e("getUnchecked")]),_:1}),t(d,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),re,t(a,{level:4,id:"has"},{default:l(()=>[e("has")]),_:1}),t(d,{codeLanguage:"ts",code:"(nodeData: unknown): boolean\n"}),ie,t(a,{level:4,id:"isvisible"},{default:l(()=>[e("isVisible")]),_:1}),t(d,{codeLanguage:"ts",code:"(statOrNodeData: Stat<unknown>|unknown): boolean;\n"}),se,t(a,{level:4,id:"iterateparent"},{default:l(()=>[e("iterateParent")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<unknown>, opt?: {\n    withSelf: boolean;\n} | undefined): Generator<Stat<unknown>, void, unknown>;\n"}),ce,t(d,{codeLanguage:"ts",code:"for (const parentStat of tree.iterateParent(nodeStat, { withSelf: false })) {\n  //\n}\n"}),t(a,{level:4,id:"move"},{default:l(()=>[e("move")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<unknown>, parent: Stat<unknown> | null, index: number): boolean;\n"}),ue,t(a,{level:4,id:"openall"},{default:l(()=>[e("openAll")]),_:1}),t(d,{codeLanguage:"ts",code:"(): void\n"}),he,t(a,{level:4,id:"opennodeandparents"},{default:l(()=>[e("openNodeAndParents")]),_:1}),t(d,{codeLanguage:"ts",code:"(nodeDataOrStat): void\n"}),pe,t(a,{level:4,id:"remove"},{default:l(()=>[e("remove")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<unknown>): boolean;\n"}),ge,t(a,{level:4,id:"removemulti"},{default:l(()=>[e("removeMulti")]),_:1}),t(d,{codeLanguage:"ts",code:"(dataArr: any[]): boolean;\n"}),_e,t(a,{level:4,id:"updatecheck"},{default:l(()=>[e("updateCheck")]),_:1}),t(d,{codeLanguage:"ts",code:"(): void\n"}),fe,t(a,{level:3,id:"events"},{default:l(()=>[e("events")]),_:1}),t(a,{level:4,id:"checknode"},{default:l(()=>[e("check:node")]),_:1}),me,t(a,{level:4,id:"clicknode"},{default:l(()=>[e("click:node")]),_:1}),ve,t(a,{level:4,id:"closenode"},{default:l(()=>[e("close:node")]),_:1}),be,t(a,{level:4,id:"opennode"},{default:l(()=>[e("open:node")]),_:1}),ye,t(a,{level:3,id:"slots"},{default:l(()=>[e("slots")]),_:1}),t(a,{level:4,id:"default"},{default:l(()=>[e("default")]),_:1}),xe,we,t(a,{level:4,id:"placeholder"},{default:l(()=>[e("placeholder")]),_:1}),ke,Se,t(a,{level:4,id:"prepend"},{default:l(()=>[e("prepend")]),_:1}),De,Le,t(a,{level:4,id:"append"},{default:l(()=>[e("append")]),_:1}),Te,Pe,t(a,{level:2,id:"draggable"},{default:l(()=>[e("Draggable")]),_:1}),t(a,{level:3,id:"props-1"},{default:l(()=>[e("props")]),_:1}),t(a,{level:4,id:"beforedragopen"},{default:l(()=>[e("beforeDragOpen")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<any>) : void | Promise<void>\n"}),Ce,t(a,{level:4,id:"disabledrag"},{default:l(()=>[e("disableDrag")]),_:1}),t(d,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),Ie,t(a,{level:4,id:"disabledrop"},{default:l(()=>[e("disableDrop")]),_:1}),t(d,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),Ee,t(a,{level:4,id:"dragopen"},{default:l(()=>[e("dragOpen")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),je,t(a,{level:4,id:"dragopendelay"},{default:l(()=>[e("dragOpenDelay")]),_:1}),t(d,{codeLanguage:"js",code:"{ type: Number, default: 0 }\n"}),Oe,t(a,{level:4,id:"eachdraggable"},{default:l(()=>[e("eachDraggable")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Ae,t(a,{level:4,id:"eachdroppable"},{default:l(()=>[e("eachDroppable")]),_:1}),t(d,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Be,t(a,{level:4,id:"externaldatahandler"},{default:l(()=>[e("externalDataHandler")]),_:1}),t(d,{codeLanguage:"ts",code:"(event: DragEvent) : any\n"}),Ne,t(a,{level:4,id:"keepplaceholder"},{default:l(()=>[e("keepPlaceholder")]),_:1}),t(d,{codeLanguage:"ts",code:"{ type: Boolean, default: false }\n"}),He,t(a,{level:4,id:"maxlevel"},{default:l(()=>[e("maxLevel")]),_:1}),t(d,{codeLanguage:"ts",code:"{\n  type: Number\n}\n"}),Me,t(a,{level:4,id:"onexternaldragover"},{default:l(()=>[e("onExternalDragOver")]),_:1}),t(d,{codeLanguage:"ts",code:"(event: DragEvent) : boolean\n"}),ze,t(a,{level:4,id:"resolvestartmovepoint"},{default:l(()=>[e("resolveStartMovePoint")]),_:1}),t(d,{codeLanguage:"ts",code:'"mouse" | "default" | ((dragElement: HTMLElement) : Point)\n'}),Re,t(a,{level:4,id:"rootdroppable"},{default:l(()=>[e("rootDroppable")]),_:1}),t(d,{codeLanguage:"ts",code:"boolean | () : boolean\n"}),Ue,t(a,{level:4,id:"triggerclass"},{default:l(()=>[e("triggerClass")]),_:1}),t(d,{codeLanguage:"js",code:"{\n  type: [String, Array]\n} // string | string[]\n"}),Ve,t(a,{level:3,id:"methods-1"},{default:l(()=>[e("methods")]),_:1}),t(a,{level:4,id:"getnodebyelement"},{default:l(()=>[e("getNodeByElement")]),_:1}),t(d,{codeLanguage:"ts",code:"(el: HTMLElement): Stat<any> | null\n"}),Ge,t(a,{level:4,id:"isdraggable"},{default:l(()=>[e("isDraggable")]),_:1}),t(d,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),Ke,t(a,{level:4,id:"isdroppable"},{default:l(()=>[e("isDroppable")]),_:1}),t(d,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),$e,t(a,{level:4,id:"ondragstart"},{default:l(()=>[e("ondragstart")]),_:1}),t(d,{codeLanguage:"ts",code:"(event: DragEvent) => void\n"}),Fe,t(a,{level:3,id:"events-1"},{default:l(()=>[e("events")]),_:1}),t(a,{level:4,id:"before-drag-start"},{default:l(()=>[e("before-drag-start")]),_:1}),We,t(a,{level:4,id:"after-drop"},{default:l(()=>[e("after-drop")]),_:1}),Ye,t(a,{level:4,id:"change"},{default:l(()=>[e("change")]),_:1}),qe,t(a,{level:4,id:"enter"},{default:l(()=>[e("enter")]),_:1}),Je,t(a,{level:4,id:"leave"},{default:l(()=>[e("leave")]),_:1}),Qe,t(a,{level:2,id:"others"},{default:l(()=>[e("Others")]),_:1}),t(a,{level:3,id:"stat"},{default:l(()=>[e("Stat")]),_:1}),Xe,t(d,{codeLanguage:"ts",code:"{\n  [x: string]: any // You can add any other keys to a stat.\n  data: T // Node data.\n  open: boolean // Is opened.\n  parent: Stat<T> | null // Parent stat.\n  children: Stat<T>[] // Children stats.\n  level: number // Level start from 1.\n  isStat: boolean // Detect if is stat object.\n  hidden: boolean // If hidden.\n  checked: boolean | 0 // If checked. 0 mean just some children checked.\n  draggable: boolean | null // null means inherit parent.\n  droppable: boolean | null // null means inherit parent.\n  style: any // Customize node style. Vue's style format.\n  class: any // Customize node class name. Vue's class format.\n}\n"}),t(a,{level:3,id:"dragcontext"},{default:l(()=>[e("dragContext")]),_:1}),Ze,t(d,{codeLanguage:"ts",code:"// vue3\nimport { dragContext } from '@he-tree/vue'\n// vue2\nimport { dragContext } from '@he-tree/vue/vue2'\n"}),t(a,{level:4,id:"startinfo"},{default:l(()=>[e("startInfo")]),_:1}),et,t(a,{level:4,id:"targetinfo"},{default:l(()=>[e("targetInfo")]),_:1}),tt,t(a,{level:4,id:"dragnode-1"},{default:l(()=>[e("dragNode")]),_:1}),nt,t(a,{level:4,id:"starttree"},{default:l(()=>[e("startTree")]),_:1}),lt,t(a,{level:4,id:"targettree"},{default:l(()=>[e("targetTree")]),_:1}),at,t(a,{level:4,id:"example---dragcontext"},{default:l(()=>[e("Example - dragContext")]),_:1}),dt,t(h),t(a,{level:3,id:"startinfo-1"},{default:l(()=>[e("StartInfo")]),_:1}),t(d,{codeLanguage:"ts",code:"{\n  tree: DraggableTreeType; // Draggable component instance.\n  dragNode: Stat<any>; // The dragging node.\n  parent: Stat<any> | null; // Parent of dragging node.\n  siblings: Stat<any>[]; // Siblings of dragging node.\n  indexBeforeDrop: number; // Index of dragging node before drop.\n}\n"})])])}const _t=_(S,[["render",ot]]);export{_t as default};
