import{C as _}from"./CodeContainer-bc270f09.js";import{_ as u,j as D,O as k,r as l,o as p,c as C,b,w as m,k as h,l as $,m as v,a as t,v as N,t as A,p as w,n as y,q as M}from"./index-86792da5.js";/* empty css                        */const V={components:{Draggable:D,OpenIcon:k},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}]}},methods:{notify(){alert("Outputed to browser console, please check")},addAppendToFirstNode(){this.$refs.tree.add({text:"new node"},this.$refs.tree.rootChildren[0],this.$refs.tree.rootChildren[0].children.length)},addAfterSecondNode(){this.$refs.tree.add({text:"new node"},null,2)},addNestedNewNodes(){this.$refs.tree.add({text:"new parent",children:[{text:"new child"}]},null,2)},addMulti(){this.$refs.tree.addMulti([{text:"addMulti1"},{text:"addMulti2"}],this.$refs.tree.rootChildren[1],0)},batchUpdate(){this.$refs.tree.batchUpdate(()=>{this.addAppendToFirstNode(),this.addMulti()})},getChecked(n){console.log(this.$refs.tree.getChecked(n)),this.notify()},getDataAll(){console.log(this.$refs.tree.getData()),this.notify()},getDataFirstNode(){console.log(this.$refs.tree.getData(null,this.$refs.tree.rootChildren[0])),this.notify()}}},g=n=>(w("data-v-ea946d7c"),n=n(),y(),n),O=["onUpdate:modelValue"],F={class:"mtl-ml"},I={class:"actions"},U=g(()=>t("br",null,null,-1)),S=g(()=>t("br",null,null,-1)),P=g(()=>t("br",null,null,-1));function B(n,e,i,f,r,d){const a=l("OpenIcon"),s=l("Draggable");return p(),C("div",null,[b(s,{ref:"tree",class:"mtl-tree",modelValue:r.treeData,"onUpdate:modelValue":e[0]||(e[0]=o=>r.treeData=o),treeLine:""},{default:m(({node:o,stat:c})=>[c.children.length?(p(),h(a,{key:0,open:c.open,class:"mtl-mr",onClick:x=>c.open=!c.open},null,8,["open","onClick"])):$("",!0),v(t("input",{class:"mtl-checkbox mtl-mr",type:"checkbox","onUpdate:modelValue":x=>c.checked=x},null,8,O),[[N,c.checked]]),t("span",F,A(o.text),1)]),_:1},8,["modelValue"]),t("div",I,[t("button",{onClick:e[1]||(e[1]=o=>d.addAppendToFirstNode())},"add: append to first node"),t("button",{onClick:e[2]||(e[2]=o=>d.addAfterSecondNode())},"add: after second node"),t("button",{onClick:e[3]||(e[3]=o=>d.addNestedNewNodes())},"add: nested new nodes"),t("button",{onClick:e[4]||(e[4]=o=>d.addMulti())},"addMulti"),U,t("button",{onClick:e[5]||(e[5]=o=>d.batchUpdate())},"batchUpdate"),S,t("button",{onClick:e[6]||(e[6]=o=>n.$refs.tree.closeAll())},"closeAll"),t("button",{onClick:e[7]||(e[7]=o=>n.$refs.tree.openAll())},"openAll"),t("button",{onClick:e[8]||(e[8]=o=>n.$refs.tree.openNodeAndParents(r.treeData[0].children[0].children[1].children[0]))}," openNodeAndParents "),t("button",{onClick:e[9]||(e[9]=o=>d.getChecked())},"getChecked"),t("button",{onClick:e[10]||(e[10]=o=>d.getChecked(!0))},"getChecked(true)"),P,t("button",{onClick:e[11]||(e[11]=o=>d.getDataAll())},"getData: all"),t("button",{onClick:e[12]||(e[12]=o=>d.getDataFirstNode())},"getData: first node")])])}const T=u(V,[["render",B],["__scopeId","data-v-ea946d7c"]]),j='<template>\n  <div>\n    <Draggable ref="tree" class="mtl-tree" v-model="treeData" treeLine\n      ><template #default="{ node, stat }">\n        <OpenIcon\n          v-if="stat.children.length"\n          :open="stat.open"\n          class="mtl-mr"\n          @click.native="stat.open = !stat.open"\n        />\n        <input\n          class="mtl-checkbox mtl-mr"\n          type="checkbox"\n          v-model="stat.checked"\n        />\n        <span class="mtl-ml">{{ node.text }}</span>\n      </template></Draggable\n    >\n    <div class="actions">\n      <button @click="addAppendToFirstNode()">add: append to first node</button>\n      <button @click="addAfterSecondNode()">add: after second node</button>\n      <button @click="addNestedNewNodes()">add: nested new nodes</button>\n      <button @click="addMulti()">addMulti</button>\n      <br />\n      <button @click="batchUpdate()">batchUpdate</button>\n      <br />\n      <button @click="$refs.tree.closeAll()">closeAll</button>\n      <button @click="$refs.tree.openAll()">openAll</button>\n      <button\n        @click="\n          $refs.tree.openNodeAndParents(\n            treeData[0].children[0].children[1].children[0]\n          )\n        "\n      >\n        openNodeAndParents\n      </button>\n      <button @click="getChecked()">getChecked</button>\n      <button @click="getChecked(true)">getChecked(true)</button>\n      <br />\n      <button @click="getDataAll()">getData: all</button>\n      <button @click="getDataFirstNode()">getData: first node</button>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro, OpenIcon } from \'@he-tree/vue\'\n  import \'@he-tree/vue/style/default.css\'\n  import \'@he-tree/vue/style/material-design.css\'\n\n  export default {\n    components: { Draggable, OpenIcon },\n    data() {\n      return {\n        treeData: [\n          {\n            text: \'Projects\',\n            children: [\n              {\n                text: \'Frontend\',\n                children: [\n                  {\n                    text: \'Vue\',\n                    children: [\n                      {\n                        text: \'Nuxt\',\n                      },\n                    ],\n                  },\n                  {\n                    text: \'React\',\n                    children: [\n                      {\n                        text: \'Next\',\n                      },\n                    ],\n                  },\n                  {\n                    text: \'Angular\',\n                  },\n                ],\n              },\n              {\n                text: \'Backend\',\n              },\n            ],\n          },\n          { text: \'Photos\' },\n          { text: \'Videos\' },\n        ],\n      }\n    },\n    methods: {\n      notify() {\n        alert(`Outputed to browser console, please check`)\n      },\n      addAppendToFirstNode() {\n        this.$refs.tree.add(\n          { text: \'new node\' },\n          this.$refs.tree.rootChildren[0],\n          this.$refs.tree.rootChildren[0].children.length\n        )\n      },\n      addAfterSecondNode() {\n        this.$refs.tree.add({ text: \'new node\' }, null, 2)\n      },\n      addNestedNewNodes() {\n        this.$refs.tree.add(\n          { text: \'new parent\', children: [{ text: \'new child\' }] },\n          null,\n          2\n        )\n      },\n      addMulti() {\n        // nested new nodes supported\n        this.$refs.tree.addMulti(\n          [{ text: \'addMulti1\' }, { text: \'addMulti2\' }],\n          this.$refs.tree.rootChildren[1],\n          0\n        )\n      },\n      batchUpdate() {\n        this.$refs.tree.batchUpdate(() => {\n          this.addAppendToFirstNode()\n          this.addMulti()\n        })\n      },\n      getChecked(withDemi) {\n        console.log(this.$refs.tree.getChecked(withDemi))\n        this.notify()\n      },\n      getDataAll() {\n        console.log(this.$refs.tree.getData())\n        this.notify()\n      },\n      getDataFirstNode() {\n        console.log(\n          this.$refs.tree.getData(null, this.$refs.tree.rootChildren[0])\n        )\n        this.notify()\n      },\n    },\n  }\n<\/script>\n<style scoped>\n  .actions {\n    margin-top: 10px;\n    border-top: 1px solid #ccc;\n    padding-top: 10px;\n  }\n  button {\n    border: 1px solid #ccc;\n    padding: 2px 5px;\n    border-radius: 5px;\n    margin-right: 8px;\n    margin-bottom: 5px;\n    font-size: small;\n  }\n</style>',L={components:{CodeContainer:_,Demo:T},data(){return{code:j}}};function R(n,e,i,f,r,d){const a=l("Demo"),s=l("CodeContainer");return p(),h(s,{code:r.code,demo:"",codeLanguage:"vue"},{default:m(()=>[b(a)]),_:1},8,["code"])}const X=u(L,[["render",R]]),q={components:{Draggable:D},data(){return{treeData:[{text:"1"},{text:"2"},{text:"3"},{text:"4"},{text:"5"},{text:"6"}]}},methods:{eachDroppable(n){const e=i=>parseInt(i)%2===1;return e(n.data.text)===e(M.dragNode.data.text)}}};function z(n,e,i,f,r,d){const a=l("Draggable");return p(),h(a,{ref:"tree",modelValue:r.treeData,"onUpdate:modelValue":e[0]||(e[0]=s=>r.treeData=s),eachDroppable:d.eachDroppable},null,8,["modelValue","eachDroppable"])}const E=u(q,[["render",z]]),G="<template>\n  <Draggable ref=\"tree\" v-model=\"treeData\" :eachDroppable=\"eachDroppable\" />\n</template>\n\n<script>\n  import { Draggable, dragContext } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { Draggable },\n    data() {\n      return {\n        treeData: [\n          { text: '1' },\n          { text: '2' },\n          { text: '3' },\n          { text: '4' },\n          { text: '5' },\n          { text: '6' },\n        ],\n      }\n    },\n    methods: {\n      eachDroppable(targetStat) {\n        const isOdd = (n) => parseInt(n) % 2 === 1\n        return (\n          isOdd(targetStat.data.text) === isOdd(dragContext.dragNode.data.text)\n        )\n      },\n    },\n  }\n<\/script>",H={components:{CodeContainer:_,Demo:E},data(){return{code:G}}};function J(n,e,i,f,r,d){const a=l("Demo"),s=l("CodeContainer");return p(),h(s,{code:r.code,demo:"",codeLanguage:"vue"},{default:m(()=>[b(a)]),_:1},8,["code"])}const Y=u(H,[["render",J]]);export{Y as a,X as i};
