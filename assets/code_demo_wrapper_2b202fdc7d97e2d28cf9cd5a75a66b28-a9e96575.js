import{C as f}from"./CodeContainer-bc270f09.js";import{_ as i,B as v,r,o as c,k as _,w as x,b as m,c as g,e as k,t as h,a as d,m as V,v as C,j as B,l as D,s as T}from"./index-86792da5.js";const y={components:{BaseTree:v},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}]}}};function P(a,o,p,u,t,s){const n=r("BaseTree");return c(),_(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e)},null,8,["modelValue"])}const j=i(y,[["render",P]]),A="<template>\n  <BaseTree v-model=\"treeData\" />\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { BaseTree },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n              {\n                text: 'Backend',\n              },\n            ],\n          },\n          { text: 'Photos' },\n          { text: 'Videos' },\n        ],\n      }\n    },\n  }\n<\/script>",F={components:{CodeContainer:f,Demo:j},data(){return{code:A}}};function R(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const Ve=i(F,[["render",R]]),w={components:{BaseTree:v},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}],checked:[]}},methods:{onCheckNode(){this.checked=this.$refs.tree.getChecked().map(a=>a.data.text)}}},L=["onClick"],U=["onUpdate:modelValue"];function O(a,o,p,u,t,s){const n=r("BaseTree");return c(),g("div",null,[k(" Checked: "+h(t.checked)+" ",1),m(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e),ref:"tree","onCheck:node":s.onCheckNode},{default:x(({node:e,stat:l})=>[d("button",{onClick:b=>l.open=!l.open},h(l.open?"-":"+"),9,L),V(d("input",{type:"checkbox","onUpdate:modelValue":b=>l.checked=b},null,8,U),[[C,l.checked]]),k(" "+h(e.text),1)]),_:1},8,["modelValue","onCheck:node"])])}const S=i(w,[["render",O]]),z="<template>\n  <div>\n    Checked: {{ checked }}\n    <BaseTree v-model=\"treeData\" ref=\"tree\" @check:node=\"onCheckNode\">\n      <template #default=\"{ node, stat }\">\n        <button @click=\"stat.open = !stat.open\">\n          {{ stat.open ? '-' : '+' }}\n        </button>\n        <input type=\"checkbox\" v-model=\"stat.checked\" />\n        {{ node.text }}\n      </template>\n    </BaseTree>\n  </div>\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { BaseTree },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n              {\n                text: 'Backend',\n              },\n            ],\n          },\n          { text: 'Photos' },\n          { text: 'Videos' },\n        ],\n        checked: [],\n      }\n    },\n    methods: {\n      onCheckNode() {\n        this.checked = this.$refs.tree.getChecked().map((v) => v.data.text)\n      },\n    },\n  }\n<\/script>",M={components:{CodeContainer:f,Demo:S},data(){return{code:z}}};function E(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const Ce=i(M,[["render",E]]),q={components:{Draggable:B},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}]}}};function G(a,o,p,u,t,s){const n=r("Draggable");return c(),_(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e)},null,8,["modelValue"])}const H=i(q,[["render",G]]),I="<template>\n  <Draggable v-model=\"treeData\" />\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { Draggable },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n              {\n                text: 'Backend',\n              },\n            ],\n          },\n          { text: 'Photos' },\n          { text: 'Videos' },\n        ],\n      }\n    },\n  }\n<\/script>",J={components:{CodeContainer:f,Demo:H},data(){return{code:I}}};function K(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const Be=i(J,[["render",K]]),Q={components:{Draggable:B},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"},...new Array(1e3).fill(1).map(a=>({text:"Node-"+Math.random().toString().substring(2,5)}))]}}};function W(a,o,p,u,t,s){const n=r("Draggable");return c(),_(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e),virtualization:"",style:{height:"500px"}},null,8,["modelValue"])}const X=i(Q,[["render",W]]),Y="<template>\n  <Draggable v-model=\"treeData\" virtualization style=\"height: 500px\" />\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { Draggable },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n              {\n                text: 'Backend',\n              },\n            ],\n          },\n          { text: 'Photos' },\n          { text: 'Videos' },\n          ...new Array(1000).fill(1).map((v) => ({\n            text: 'Node-' + Math.random().toString().substring(2, 5),\n          })),\n        ],\n      }\n    },\n  }\n<\/script>",Z={components:{CodeContainer:f,Demo:X},data(){return{code:Y}}};function ee(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const Ne=i(Z,[["render",ee]]),te={components:{BaseTree:v},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]}]}]}}};function oe(a,o,p,u,t,s){const n=r("BaseTree");return c(),_(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e),btt:""},null,8,["modelValue"])}const ne=i(te,[["render",oe]]),re="<template>\n  <BaseTree v-model=\"treeData\" btt />\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { BaseTree },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      }\n    },\n  }\n<\/script>",ce={components:{CodeContainer:f,Demo:ne},data(){return{code:re}}};function ae(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const Te=i(ce,[["render",ae]]),de={components:{BaseTree:v},data(){return{treeData:[{text:"Projects",children:[{text:"Frontend",children:[{text:"Vue",children:[{text:"Nuxt"}]},{text:"React",children:[{text:"Next"}]},{text:"Angular"}]},{text:"Backend"}]},{text:"Photos"},{text:"Videos"}]}}},se={key:0},le=d("th",null,"Text",-1),ie=d("th",null,"Level",-1),pe={key:0},ue=d("th",null,"Text",-1),_e=d("th",null,"Level",-1),xe={key:0},me=["onUpdate:modelValue"],he=["onClick"];function fe(a,o,p,u,t,s){const n=r("BaseTree");return c(),_(n,{modelValue:t.treeData,"onUpdate:modelValue":o[0]||(o[0]=e=>t.treeData=e),table:""},{prepend:x(({tree:e})=>[d("thead",null,[d("tr",null,[e.dragOvering?D("",!0):(c(),g("th",se,"action")),le,ie])])]),append:x(({tree:e})=>[d("tfoot",null,[d("tr",null,[e.dragOvering?D("",!0):(c(),g("th",pe,"action")),ue,_e])])]),default:x(({node:e,stat:l,indentStyle:b,tree:N})=>[N.dragOvering?D("",!0):(c(),g("td",xe,[V(d("input",{type:"checkbox","onUpdate:modelValue":$=>l.checked=$},null,8,me),[[C,l.checked]]),d("button",{onClick:$=>l.open=!l.open},h(l.open?"-":"+"),9,he)])),d("td",{style:T(b)},h(e.text),5),d("td",null,h(l.level),1)]),_:1},8,["modelValue"])}const be=i(de,[["render",fe]]),ge="<template>\n  <BaseTree v-model=\"treeData\" table>\n    <template #prepend=\"{ tree }\">\n      <thead>\n        <tr>\n          <th v-if=\"!tree.dragOvering\">action</th>\n          <th>Text</th>\n          <th>Level</th>\n        </tr>\n      </thead>\n    </template>\n    <template #append=\"{ tree }\">\n      <tfoot>\n        <tr>\n          <th v-if=\"!tree.dragOvering\">action</th>\n          <th>Text</th>\n          <th>Level</th>\n        </tr>\n      </tfoot>\n    </template>\n    <template #default=\"{ node, stat, indentStyle, tree }\">\n      <td v-if=\"!tree.dragOvering\">\n        <input type=\"checkbox\" v-model=\"stat.checked\" />\n        <button @click=\"stat.open = !stat.open\">\n          {{ stat.open ? '-' : '+' }}\n        </button>\n      </td>\n      <td :style=\"indentStyle\">\n        {{ node.text }}\n      </td>\n      <td>\n        {{ stat.level }}\n      </td>\n    </template>\n  </BaseTree>\n</template>\n\n<script>\n  import { BaseTree, Draggable, pro } from '@he-tree/vue'\n  import '@he-tree/vue/style/default.css'\n\n  export default {\n    components: { BaseTree },\n    data() {\n      return {\n        treeData: [\n          {\n            text: 'Projects',\n            children: [\n              {\n                text: 'Frontend',\n                children: [\n                  {\n                    text: 'Vue',\n                    children: [\n                      {\n                        text: 'Nuxt',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'React',\n                    children: [\n                      {\n                        text: 'Next',\n                      },\n                    ],\n                  },\n                  {\n                    text: 'Angular',\n                  },\n                ],\n              },\n              {\n                text: 'Backend',\n              },\n            ],\n          },\n          { text: 'Photos' },\n          { text: 'Videos' },\n        ],\n      }\n    },\n  }\n<\/script>",ve={components:{CodeContainer:f,Demo:be},data(){return{code:ge}}};function De(a,o,p,u,t,s){const n=r("Demo"),e=r("CodeContainer");return c(),_(e,{code:t.code,demo:"",codeLanguage:"vue"},{default:x(()=>[m(n)]),_:1},8,["code"])}const ye=i(ve,[["render",De]]);export{Ce as a,Be as b,Ne as c,Te as d,ye as e,Ve as i};
