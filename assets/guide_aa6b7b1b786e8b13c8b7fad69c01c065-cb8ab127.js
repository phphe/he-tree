import{i as b,a as g,b as H,c as z,d as D,e as k}from"./code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28-a9e96575.js";import{i as w}from"./code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1-51dfb0db.js";import{_ as T,g as j,u as L,f as _,h as y,r as i,c as V,a as d,b as l,w as a,e,i as C,o as A}from"./index-86792da5.js";import{_ as P,C as O}from"./CodeContainer-bc270f09.js";/* empty css                        */const B={extends:P,components:{CodeContainer:O,inject___compiled_docs_code_demo_wrapper_d36d98bbcf8569d5c5210b3a9df1a740_vue_6f41399e7eb4b0127d1b0e15d8812377:b,inject___compiled_docs_code_demo_wrapper_e337fbaac4327c954de28e8177b76c90_vue_2c3ec87f7bd923c3a0c2bfe9cff7aa12:g,inject___compiled_docs_code_demo_wrapper_da1ef69c9a488b0e9121ee559ddf78e8_vue_a8b22232c4e4ef5e42aa758cc6cd557a:H,inject___compiled_docs_code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1_vue_5094dc6d301c1386515831df2c679ccf:w,inject___compiled_docs_code_demo_wrapper_b3898d371eeafb16cd3797411374b4d4_vue_6d264fbe43b3a84b74f1ff783f0a8b3c:z,inject___compiled_docs_code_demo_wrapper_b427f16e24d854be6a2c2c40abf9ef38_vue_cc98fbcfbd4f29b9e1a59b31c6acac77:D,inject___compiled_docs_code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28_vue_06abbe73a299eada51f087eb53fc07a1:k},setup(){const o=j(),c={name:"使用指南",id:"使用指南",level:1,children:[{name:"安装",id:"安装",level:2,children:[{name:"CDN",id:"cdn",level:3,children:[]}]},{name:"引入",id:"引入",level:2,children:[{name:"Vue3",id:"vue3",level:3,children:[]},{name:"Vue2",id:"vue2",level:3,children:[]}]},{name:"示例",id:"示例",level:2,children:[{name:"示例项目",id:"示例项目",level:3,children:[]},{name:"基础",id:"基础",level:3,children:[]},{name:"折叠与勾选框",id:"折叠与勾选框",level:3,children:[]},{name:"拖拽",id:"拖拽",level:3,children:[]},{name:"简单样式 Material Design 和连接线",id:"简单样式-material-design-和连接线",level:3,children:[]}]},{name:"节点缩进",id:"节点缩进",level:2,children:[]},{name:"数据",id:"数据",level:2,children:[]},{name:"数据更新(内部行为)",id:"数据更新内部行为",level:2,children:[{name:"Vuex 例子",id:"vuex-例子",level:3,children:[]}]},{name:"数据修改(外部操作)",id:"数据修改外部操作",level:2,children:[]},{name:"Material Design (预置样式)",id:"material-design-预置样式",level:2,children:[]},{name:"Tree Line (连接线)",id:"tree-line-连接线",level:2,children:[]},{name:"虚拟列表",id:"虚拟列表",level:2,children:[]},{name:"遍历树形数据",id:"遍历树形数据",level:2,children:[]},{name:"默认展开所有节点",id:"默认展开所有节点",level:2,children:[]},{name:"从右到左显示",id:"从右到左显示",level:2,children:[]},{name:"从下到上显示",id:"从下到上显示",level:2,children:[]},{name:"渲染为表格",id:"渲染为表格",level:2,children:[]},{name:"拖拽相关",id:"拖拽相关",level:2,children:[{name:"自定义触发拖拽的元素",id:"自定义触发拖拽的元素",level:3,children:[]},{name:"拖拽控制/可拖拽/可拖放",id:"拖拽控制可拖拽可拖放",level:3,children:[]},{name:"拖拽时限制最大层数/深度",id:"拖拽时限制最大层数深度",level:3,children:[]},{name:"拖拽到节点上时打开该节点",id:"拖拽到节点上时打开该节点",level:3,children:[]},{name:"占位元素",id:"占位元素",level:3,children:[]},{name:"拖拽时相关信息",id:"拖拽时相关信息",level:3,children:[]},{name:"外部拖入",id:"外部拖入",level:3,children:[]}]},{name:"触摸 & 移动设备",id:"触摸--移动设备",level:2,children:[]},{name:"水印",id:"水印",level:2,children:[]},{name:"Pro",id:"pro",level:2,children:[]}]};L(c.name,o),_.value=c.children||[],y(()=>{_.value=null})}},M={class:"docs-view"},S={class:"article mt-14 mb-8 prose"},I=d("p",null,[d("strong",null,"!!! 重要"),e(", 使用 Vue2 时，he-tree 在 Vue2.7 下不工作, 你可以复制这个示例文件夹来开始你的项目: "),d("a",{href:"https://github.com/phphe/he-tree/tree/dev/examples/example-vue2-no-ts"},"https://github.com/phphe/he-tree/tree/dev/examples/example-vue2-no-ts")],-1),N=d("ul",null,[d("li",null,[e("Vue3: "),d("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/iife/vue3.html"},"example")]),d("li",null,[e("Vue2: "),d("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/iife/vue2.html"},"example")])],-1),$=d("p",null,[d("code",null,"BaseTree"),e(" 是基础树组件. "),d("code",null,"Draggable"),e(" 组件继承于 "),d("code",null,"BaseTree"),e(".")],-1),K=d("ul",null,[d("li",null,[d("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/example-vue3/"},"he-tree + Vue3 + Vite + Typescript")]),d("li",null,[d("a",{href:"https://github.com/phphe/he-tree/blob/dev/examples/example-vue2/"},"he-tree + Vue2 + vue-cli + Typescript")])],-1),W=d("code",null,"stat.checked",-1),F=d("code",null,"true, false, 0",-1),U=d("code",null,"0",-1),E=d("code",null,"checked",-1),R=d("code",null,"0",-1),Y=d("code",null,"checked",-1),q=d("p",null,[d("a",{name:"simpleStyleAndLine"})],-1),G=d("code",null,"children",-1),J=d("code",null,"text",-1),Q=d("code",null,"v-model",-1),X=d("li",null,[e("modify: 直接修改绑定的数据对象. 例如当一个节点改变时，将修改此节点，而"),d("code",null,"v-model"),e("绑定的对象还是原对象。")],-1),Z=d("li",null,[e("new: 提交一个新的数据对象, 适用于 vuex. "),d("code",null,"v-model"),e("绑定的对象将变为新对象。参考下一节的 vuex 例子。")],-1),x=d("code",null,"open",-1),ee=d("code",null,"parent",-1),le=d("code",null,"children",-1),de=d("code",null,"level",-1),ae=d("p",null,[d("a",{href:"#simpleStyleAndLine"},"代码和演示"),e("。库预置了简单样式，Material Design 风格。通过如下步骤启用：")],-1),oe=d("code",null,"mtl-tree",-1),ne=d("li",null,[e("库包含一个折叠图标组件"),d("code",null,"OpenIcon"),e(", 你可以使用它作为你的折叠图标。"),d("code",null,"material-design.css"),e("包含一个简单的勾选框样式"),d("code",null,"mtl-checkbox"),e(", 你可以添加到勾选框上美化它。"),d("a",{href:"#simpleStyleAndLine"},"代码和演示"),e("。")],-1),te=d("a",{href:"#simpleStyleAndLine"},"代码和演示",-1),re=d("strong",null,"此功能在表格模式下无效。",-1),ie=d("p",null,"Tree Line 的样式可以通过 css 类控制。例如：",-1),ce=d("code",null,"tree-line",-1),_e=d("code",null,"tree-vline",-1),ue=d("code",null,"tree-hline",-1),se=d("p",null,[e("虚拟列表由我的另一个库"),d("code",null,"virtual-list"),e("实现. "),d("a",{href:"https://github.com/phphe/virtual-list"},"virtual-list"),e(".")],-1),pe=d("p",null,[e("使用"),d("code",null,"walkTreeData"),e("方法遍历树形数据。")],-1),fe=d("p",null,[e("树形数据示例, "),d("code",null,"childrenKey"),e("必须正确：")],-1),ve=d("p",null,"详细类型：",-1),he=C("<p><code>WalkTreeDataHandler</code> 返回不同的值的效果：</p><ul><li><code>false</code>: 停止遍历</li><li><code>skip children</code>: 跳过当前节点的子节点</li><li><code>skip siblings</code>: 跳过当前节点的同级节点</li><li>其他值: 无影响</li></ul><p><code>WalkTreeDataOptions</code>:</p><ul><li><code>childrenKey</code>: 树形数据子节点的<code>key</code>, 默认是<code>children</code>.</li><li><code>reverse</code>: 遍历节点数组时，从后往前遍历。</li><li><code>childFirst</code>: 先遍历子节点。</li></ul><p>例子，寻找所有 2 级节点：</p>",5),me=d("p",null,[e("表示拖拽时的可放置区域。拖拽时, 会生成一个元素默认淡蓝色背景, 用以标识可放置的位置. 使用插槽"),d("code",null,"placeholder"),e("控制它, 例如添加提示文字.")],-1),be=d("p",null,[e("占位元素有类: "),d("code",null,"drag-placeholder"),e(". 可以使用这个类名自定义它的样式。")],-1),ge=d("p",null,"此组件基于 HTML5 Drag and Drop API, 所以在支持 Drag and Drop API 到移动设备上也能工作. 如果不支持, 可以尝试使设备兼容 Drag and Drop API 的库.",-1),He=d("p",null,[d("strong",null,"注意"),e(": 触摸时, 用户需要触摸并等一会儿才能触发拖拽。")],-1),ze=d("strong",null,"此项默认关闭",-1),De=d("li",null,[d("p",null,"跨树拖拽.")],-1),ke=d("li",null,[d("p",null,"拖拽开始时克隆原节点而不是移动原节点.")],-1),we=d("p",null,"可拖拽表格.",-1);function Te(o,c,je,Le,ye,Ve){const t=i("vheading"),r=i("CodeContainer"),u=i("inject___compiled_docs_code_demo_wrapper_d36d98bbcf8569d5c5210b3a9df1a740_vue_6f41399e7eb4b0127d1b0e15d8812377"),s=i("inject___compiled_docs_code_demo_wrapper_e337fbaac4327c954de28e8177b76c90_vue_2c3ec87f7bd923c3a0c2bfe9cff7aa12"),n=i("Anchor"),p=i("inject___compiled_docs_code_demo_wrapper_da1ef69c9a488b0e9121ee559ddf78e8_vue_a8b22232c4e4ef5e42aa758cc6cd557a"),f=i("inject___compiled_docs_code_demo_wrapper_3f0c8237d5dd9eb1413fd6d4f11c7ee1_vue_5094dc6d301c1386515831df2c679ccf"),v=i("inject___compiled_docs_code_demo_wrapper_b3898d371eeafb16cd3797411374b4d4_vue_6d264fbe43b3a84b74f1ff783f0a8b3c"),h=i("inject___compiled_docs_code_demo_wrapper_b427f16e24d854be6a2c2c40abf9ef38_vue_cc98fbcfbd4f29b9e1a59b31c6acac77"),m=i("inject___compiled_docs_code_demo_wrapper_2b202fdc7d97e2d28cf9cd5a75a66b28_vue_06abbe73a299eada51f087eb53fc07a1");return A(),V("div",M,[d("div",S,[l(t,{level:1,id:"使用指南"},{default:a(()=>[e("使用指南")]),_:1}),l(t,{level:2,id:"安装"},{default:a(()=>[e("安装")]),_:1}),l(r,{codeLanguage:"sh",code:"# Vue3\nnpm i --save @he-tree/vue\n# Vue2. 仅支持Vue@2.6\nnpm i --save @he-tree/vue @vue/composition-api\n"}),I,l(t,{level:3,id:"cdn"},{default:a(()=>[e("CDN")]),_:1}),N,l(t,{level:2,id:"引入"},{default:a(()=>[e("引入")]),_:1}),l(t,{level:3,id:"vue3"},{default:a(()=>[e("Vue3")]),_:1}),l(r,{codeLanguage:"ts",code:"import { BaseTree, Draggable } from '@he-tree/vue'\nimport '@he-tree/vue/style/default.css'\n"}),l(t,{level:3,id:"vue2"},{default:a(()=>[e("Vue2")]),_:1}),l(r,{codeLanguage:"ts",code:"import { BaseTree, Draggable } from '@he-tree/vue/vue2'\nimport '@he-tree/vue/style/default.css'\n"}),$,l(t,{level:2,id:"示例"},{default:a(()=>[e("示例")]),_:1}),l(t,{level:3,id:"示例项目"},{default:a(()=>[e("示例项目")]),_:1}),K,l(t,{level:3,id:"基础"},{default:a(()=>[e("基础")]),_:1}),l(u),l(t,{level:3,id:"折叠与勾选框"},{default:a(()=>[e("折叠与勾选框")]),_:1}),l(s),d("p",null,[e("仅提供折叠与勾选的逻辑, 你需要通过 Vue 插槽传入你自己的样式代码. 其中"),W,e(" 有 3 个值:"),F,e(". "),U,e("表示子级部分选中, 你可以用其确定半选状态. 当父节点勾选时，所有子节点将被勾选. 当所有子节点勾选时，父节点将被勾选。当部分子节点勾选时，父节点的"),E,e("值变为"),R,e(". 如果你需要其他勾选逻辑，不要死磕"),Y,e(", 你可以在节点上增加一个其他属性来实现. 相关方法: "),l(n,{to:o.resolveHref("/zh/v2/api#getchecked"),underline:""},{default:a(()=>[e("getChecked")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#getunchecked"),underline:""},{default:a(()=>[e("getUnchecked")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#updatecheck"),underline:""},{default:a(()=>[e("updateCheck")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#openall"),underline:""},{default:a(()=>[e("openAll")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#closeall"),underline:""},{default:a(()=>[e("closeAll")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#isvisible"),underline:""},{default:a(()=>[e("isVisible")]),_:1},8,["to"]),e(".")]),l(t,{level:3,id:"拖拽"},{default:a(()=>[e("拖拽")]),_:1}),l(p),q,l(t,{level:3,id:"简单样式-material-design-和连接线"},{default:a(()=>[e("简单样式 Material Design 和连接线")]),_:1}),l(f),l(t,{level:2,id:"节点缩进"},{default:a(()=>[e("节点缩进")]),_:1}),d("p",null,[e("不要用 css 设置节点缩进, 而是用 prop "),l(n,{to:o.resolveHref("/zh/v2/api#indent"),underline:""},{default:a(()=>[e("indent")]),_:1},8,["to"]),e(".")]),l(t,{level:2,id:"数据"},{default:a(()=>[e("数据")]),_:1}),d("p",null,[e("数据为树形数据, 不支持平面数据. 平面数据需要你自行转换. 其中键名"),G,e("可以通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#childrenkey"),underline:""},{default:a(()=>[e("childrenKey")]),_:1},8,["to"]),e("修改, "),J,e("可以通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#textkey"),underline:""},{default:a(()=>[e("textKey")]),_:1},8,["to"]),e("修改. 例如:")]),l(r,{codeLanguage:"js",code:"{\n  text: 'Root',\n  children: [\n    {text: 'Child'}\n  ]\n}\n"}),l(t,{level:2,id:"数据更新内部行为"},{default:a(()=>[e("数据更新(内部行为)")]),_:1}),d("p",null,[e("可以使用"),Q,e("绑定数据. 本组件会复制数据对象作为内部数据. 当内部数据变动时, 例如拖拽时, 有 3 种方式提交新数据到外部. 默认情况下直接修改绑定的数据对象的变动的局部. 通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#updatebehavior"),underline:""},{default:a(()=>[e("updateBehavior")]),_:1},8,["to"]),e("设置数据提交方式. updateBehavior 的值:")]),d("ul",null,[X,Z,d("li",null,[e("disabled: 不提交. 你可以使用"),l(n,{to:o.resolveHref("/zh/v2/api#getdata"),underline:""},{default:a(()=>[e("getData")]),_:1},8,["to"]),e("方法手动生成并获取当前数据.")])]),l(t,{level:3,id:"vuex-例子"},{default:a(()=>[e("Vuex 例子")]),_:1}),l(r,{codeLanguage:"vue",code:"<template>\n  <YourTree v-model=\"treeData\" />\n</template>\n<script>\n  export default {\n    computed: {\n      treeData: {\n        get() {\n          return this.$store.state.treeData\n        },\n        set(value) {\n          this.$store.commit('updateTreeData', value)\n        },\n      },\n    },\n  }\n<\/script>\n"}),l(t,{level:2,id:"数据修改外部操作"},{default:a(()=>[e("数据修改(外部操作)")]),_:1}),d("p",null,[e("绑定的数据对象由外部改变时, 组件内部将会为每一个节点创建"),l(n,{to:o.resolveHref("/zh/v2/api#stat"),underline:""},{default:a(()=>[e("stat")]),_:1},8,["to"]),e("对象, 用来存储相关信息, 如 "),x,e(", "),ee,e(", "),le,e(", "),de,e(". 可通过钩子 prop "),l(n,{to:o.resolveHref("/zh/v2/api#stathandler"),underline:""},{default:a(()=>[e("statHandler")]),_:1},8,["to"]),e(" 在 stat 创建之后修改每一个 stat. 相关 data: "),l(n,{to:o.resolveHref("/zh/v2/api#stats"),underline:""},{default:a(()=>[e("stats")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#statsflat"),underline:""},{default:a(()=>[e("statsFlat")]),_:1},8,["to"]),e(".")]),d("p",null,[e("操作数据的方法: "),l(n,{to:o.resolveHref("/zh/v2/api#getstat"),underline:""},{default:a(()=>[e("getStat")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#has"),underline:""},{default:a(()=>[e("has")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#updatecheck"),underline:""},{default:a(()=>[e("updateCheck")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#getchecked"),underline:""},{default:a(()=>[e("getChecked")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#getunchecked"),underline:""},{default:a(()=>[e("getUnchecked")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#openall"),underline:""},{default:a(()=>[e("openAll")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#closeall"),underline:""},{default:a(()=>[e("closeAll")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#opennodeandparents"),underline:""},{default:a(()=>[e("openNodeAndParents")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#isvisible"),underline:""},{default:a(()=>[e("isVisible")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#move"),underline:""},{default:a(()=>[e("move")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#add"),underline:""},{default:a(()=>[e("add")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#addmulti"),underline:""},{default:a(()=>[e("addMulti")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#remove"),underline:""},{default:a(()=>[e("remove")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#removemulti"),underline:""},{default:a(()=>[e("removeMulti")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#iterateparent"),underline:""},{default:a(()=>[e("iterateParent")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#getsiblings"),underline:""},{default:a(()=>[e("getSiblings")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#getdata"),underline:""},{default:a(()=>[e("getData")]),_:1},8,["to"]),e(".")]),l(t,{level:2,id:"material-design-预置样式"},{default:a(()=>[e("Material Design (预置样式)")]),_:1}),ae,d("ul",null,[d("li",null,[e("引入 css"),l(r,{codeLanguage:"js",code:"import '@he-tree/vue/style/default.css'\nimport '@he-tree/vue/style/material-design.css'\n"})]),d("li",null,[e("添加 css 名："),oe,l(r,{codeLanguage:"html",code:'<Draggable class="mtl-tree" v-model="treeData" />\n'})]),ne]),l(t,{level:2,id:"tree-line-连接线"},{default:a(()=>[e("Tree Line (连接线)")]),_:1}),d("p",null,[te,e("。使用 prop "),l(n,{to:o.resolveHref("/zh/v2/api#treeline"),underline:""},{default:a(()=>[e("treeLine")]),_:1},8,["to"]),e(" 启用它，使用 prop "),l(n,{to:o.resolveHref("/zh/v2/api#treelineoffset"),underline:""},{default:a(()=>[e("treeLineOffset")]),_:1},8,["to"]),e(" 设置位移。"),re]),ie,d("ul",null,[d("li",null,[ce,e(": 可以设置 Tree Line 的颜色。"),l(r,{codeLanguage:"css",code:".your-tree .tree-line {\n  background: red;\n}\n"})]),d("li",null,[_e,e(": 可以设置 Tree Line 竖线的颜色，宽度。"),l(r,{codeLanguage:"css",code:".your-tree .tree-vline {\n  background: red;\n  width: 1px;\n}\n"})]),d("li",null,[ue,e(": 可以设置 Tree Line 横线的颜色，宽度。"),l(r,{codeLanguage:"css",code:".your-tree .tree-hline {\n  background: red;\n  height: 1px;\n  width: 10px;\n}\n"})])]),l(t,{level:2,id:"虚拟列表"},{default:a(()=>[e("虚拟列表")]),_:1}),l(v),d("p",null,[e("使用虚拟列表时需要给树或其父元素设置高度, 否则会自动扩展高度为最大. 相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#virtualization"),underline:""},{default:a(()=>[e("virtualization")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#virtualizationprerendercount"),underline:""},{default:a(()=>[e("virtualizationPrerenderCount")]),_:1},8,["to"])]),se,l(t,{level:2,id:"遍历树形数据"},{default:a(()=>[e("遍历树形数据")]),_:1}),pe,l(r,{codeLanguage:"js",code:"// Vue3\nimport { walkTreeData } from '@he-tree/vue'\n// Vue2\nimport { walkTreeData } from '@he-tree/vue/vue2'\n\nwalkTreeData(node, (node, index, parent) => {}, {\n  childrenKey: 'children',\n  reverse: false,\n  childFirst: false,\n})\n"}),fe,l(r,{codeLanguage:"js",code:"let treeData1 = { a: 1, children: [{ b: 1 }] }\nlet treeData2 = [{ a: 1, children: [{ b: 1 }] }, { c: 1 }]\nlet treeData3 = { a: 1, sub: [{ b: 1 }] }\n"}),ve,l(r,{codeLanguage:"ts",code:"declare function walkTreeData<T extends Object>(\n  obj: T | T[],\n  handler: WalkTreeDataHandler<T>,\n  opt?: WalkTreeDataOptions\n): void\ndeclare type WalkTreeDataHandler<T> = (\n  node: T,\n  index: number,\n  parent: T | null,\n  path: TreeDataPath\n) => void | false | 'skip children' | 'skip siblings'\ndeclare type WalkTreeDataOptions = {\n  childrenKey?: string\n  reverse?: boolean\n  childFirst?: boolean\n}\n"}),he,l(r,{codeLanguage:"js",code:"let results = []\nwalkTreeData(tree.rootChildren, (stat) => {\n  if (stat.level === 2) {\n    results.push(stat)\n    return `skip children`\n  }\n})\n"}),l(t,{level:2,id:"默认展开所有节点"},{default:a(()=>[e("默认展开所有节点")]),_:1}),d("p",null,[e("相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#defaultopen"),underline:""},{default:a(()=>[e("defaultOpen")]),_:1},8,["to"])]),l(t,{level:2,id:"从右到左显示"},{default:a(()=>[e("从右到左显示")]),_:1}),d("p",null,[e("相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#rtl"),underline:""},{default:a(()=>[e("rtl")]),_:1},8,["to"])]),l(t,{level:2,id:"从下到上显示"},{default:a(()=>[e("从下到上显示")]),_:1}),d("p",null,[e("相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#btt"),underline:""},{default:a(()=>[e("btt")]),_:1},8,["to"])]),l(h),l(t,{level:2,id:"渲染为表格"},{default:a(()=>[e("渲染为表格")]),_:1}),l(m),d("p",null,[e("支持虚拟列表与表格同时工作. 相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#table"),underline:""},{default:a(()=>[e("table")]),_:1},8,["to"]),e(". 通过插槽 "),l(n,{to:o.resolveHref("/zh/v2/api#prepend"),underline:""},{default:a(()=>[e("prepend")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#append"),underline:""},{default:a(()=>[e("append")]),_:1},8,["to"]),e(" 添加表头和表底部. 表格拖拽为高级功能, 需购买"),l(n,{to:o.resolveHref("/zh/pro"),underline:""},{default:a(()=>[e("pro")]),_:1},8,["to"]),e("启用.")]),l(t,{level:2,id:"拖拽相关"},{default:a(()=>[e("拖拽相关")]),_:1}),l(t,{level:3,id:"自定义触发拖拽的元素"},{default:a(()=>[e("自定义触发拖拽的元素")]),_:1}),d("p",null,[e("相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#triggerclass"),underline:""},{default:a(()=>[e("triggerClass")]),_:1},8,["to"])]),l(t,{level:3,id:"拖拽控制可拖拽可拖放"},{default:a(()=>[e("拖拽控制/可拖拽/可拖放")]),_:1}),d("p",null,[e("可通过节点"),l(n,{to:o.resolveHref("/zh/v2/api#stat"),underline:""},{default:a(()=>[e("stat")]),_:1},8,["to"]),e("控制每个节点. 也可通过钩子函数控制. 相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#disabledrag"),underline:""},{default:a(()=>[e("disableDrag")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#disabledrop"),underline:""},{default:a(()=>[e("disableDrop")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#eachdraggable"),underline:""},{default:a(()=>[e("eachDraggable")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#eachdroppable"),underline:""},{default:a(()=>[e("eachDroppable")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#rootdroppable"),underline:""},{default:a(()=>[e("rootDroppable")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#maxlevel"),underline:""},{default:a(()=>[e("maxLevel")]),_:1},8,["to"])]),l(t,{level:3,id:"拖拽时限制最大层数深度"},{default:a(()=>[e("拖拽时限制最大层数/深度")]),_:1}),d("p",null,[e("相关 props: "),l(n,{to:o.resolveHref("/zh/v2/api#maxlevel"),underline:""},{default:a(()=>[e("maxLevel")]),_:1},8,["to"])]),l(t,{level:3,id:"拖拽到节点上时打开该节点"},{default:a(()=>[e("拖拽到节点上时打开该节点")]),_:1}),d("p",null,[e("当把节点拖动到一个折叠节点上时, 默认会打开此节点以便拖入其中. 可通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#dragopen"),underline:""},{default:a(()=>[e("dragOpen")]),_:1},8,["to"]),e("控制. 可通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#dragopendelay"),underline:""},{default:a(()=>[e("dragOpenDelay")]),_:1},8,["to"]),e("设置等待时间. 钩子 prop: "),l(n,{to:o.resolveHref("/zh/v2/api#beforedragopen"),underline:""},{default:a(()=>[e("beforeDragOpen")]),_:1},8,["to"])]),l(t,{level:3,id:"占位元素"},{default:a(()=>[e("占位元素")]),_:1}),me,d("p",null,[e("拖拽时, 如果离开树, 占位元素将会被删掉, 如果此时停止拖拽, 树将恢复原状. 通过 prop "),l(n,{to:o.resolveHref("/zh/v2/api#keepplaceholder"),underline:""},{default:a(()=>[e("keepPlaceholder")]),_:1},8,["to"]),e("可使占位元素在拖拽结束前一直保留.")]),be,l(t,{level:3,id:"拖拽时相关信息"},{default:a(()=>[e("拖拽时相关信息")]),_:1}),d("p",null,[e("拖拽时相关信息不在事件或钩子函数的参数里, 而是暴露为一个对象 "),l(n,{to:o.resolveHref("/zh/v2/api#dragcontext"),underline:""},{default:a(()=>[e("dragContext")]),_:1},8,["to"]),e(".")]),l(r,{codeLanguage:"ts",code:"// vue3\nimport { dragContext } from '@he-tree/vue'\n// vue2\nimport { dragContext } from '@he-tree/vue/vue2'\n"}),l(t,{level:3,id:"外部拖入"},{default:a(()=>[e("外部拖入")]),_:1}),d("p",null,[e("外部拖入指外部的信息通过 Drag and Drop API 拖入树内. 可以通过钩子 props: "),l(n,{to:o.resolveHref("/zh/v2/api#onexternaldragover"),underline:""},{default:a(()=>[e("onExternalDragOver")]),_:1},8,["to"]),e(", "),l(n,{to:o.resolveHref("/zh/v2/api#externaldatahandler"),underline:""},{default:a(()=>[e("externalDataHandler")]),_:1},8,["to"]),e(" 处理这一情况. 以此可实现与任何组件通过 Drag and Drop API 互通.")]),l(t,{level:2,id:"触摸--移动设备"},{default:a(()=>[e("触摸 & 移动设备")]),_:1}),ge,He,l(t,{level:2,id:"水印"},{default:a(()=>[e("水印")]),_:1}),d("p",null,[ze,e("。 此组件会在浏览器控制台输出一条水印信息. 可使用 prop "),l(n,{to:o.resolveHref("/zh/v2/api#watermark"),underline:""},{default:a(()=>[e("watermark")]),_:1},8,["to"]),e("关闭.")]),l(t,{level:2,id:"pro"},{default:a(()=>[e("Pro")]),_:1}),d("p",null,[l(n,{to:o.resolveHref("/zh/pro"),underline:""},{default:a(()=>[e("pro")]),_:1},8,["to"]),e(" 有以下高级功能.")]),d("ul",null,[De,ke,d("li",null,[we,d("p",null,[e("详情"),l(n,{to:o.resolveHref("/zh/pro"),underline:""},{default:a(()=>[e("请点击")]),_:1},8,["to"]),e(".")])])])])])}const Me=T(B,[["render",Te]]);export{Me as default};
