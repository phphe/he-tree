import{i as p,a as h}from"./code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966-37bd7131.js";import{_ as g,g as v,u as f,f as s,h as m,r as o,c as b,a as t,b as l,w as n,e,i as y,o as S}from"./index-86792da5.js";import{_ as L,C as x}from"./CodeContainer-bc270f09.js";/* empty css                        */const k={extends:L,components:{CodeContainer:x,inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532:p,inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662:h},setup(){const i=v(),r={name:"API",id:"api",level:1,children:[{name:"BaseTree",id:"basetree",level:2,children:[{name:"props",id:"props",level:3,children:[{name:"btt",id:"btt",level:4,children:[]},{name:"childrenKey",id:"childrenkey",level:4,children:[]},{name:"defaultOpen",id:"defaultopen",level:4,children:[]},{name:"indent",id:"indent",level:4,children:[]},{name:"nodeKey",id:"nodekey",level:4,children:[]},{name:"rtl",id:"rtl",level:4,children:[]},{name:"statHandler",id:"stathandler",level:4,children:[]},{name:"table",id:"table",level:4,children:[]},{name:"textKey",id:"textkey",level:4,children:[]},{name:"updateBehavior",id:"updatebehavior",level:4,children:[]},{name:"virtualization",id:"virtualization",level:4,children:[]},{name:"virtualizationPrerenderCount",id:"virtualizationprerendercount",level:4,children:[]},{name:"treeLine",id:"treeline",level:4,children:[]},{name:"treeLineOffset",id:"treelineoffset",level:4,children:[]},{name:"watermark",id:"watermark",level:4,children:[]}]},{name:"data",id:"data",level:3,children:[{name:"dragNode",id:"dragnode",level:4,children:[]},{name:"dragOvering",id:"dragovering",level:4,children:[]},{name:"self",id:"self",level:4,children:[]},{name:"stats",id:"stats",level:4,children:[]},{name:"statsFlat",id:"statsflat",level:4,children:[]}]},{name:"computed",id:"computed",level:3,children:[{name:"rootChildren",id:"rootchildren",level:4,children:[]}]},{name:"methods(方法)",id:"methods方法",level:3,children:[{name:"methods examples",id:"methods-examples",level:4,children:[]},{name:"add",id:"add",level:4,children:[]},{name:"addMulti",id:"addmulti",level:4,children:[]},{name:"batchUpdate",id:"batchupdate",level:4,children:[]},{name:"closeAll",id:"closeall",level:4,children:[]},{name:"getChecked",id:"getchecked",level:4,children:[]},{name:"getData",id:"getdata",level:4,children:[]},{name:"getRootEl",id:"getrootel",level:4,children:[]},{name:"getSiblings",id:"getsiblings",level:4,children:[]},{name:"getStat",id:"getstat",level:4,children:[]},{name:"getUnchecked",id:"getunchecked",level:4,children:[]},{name:"has",id:"has",level:4,children:[]},{name:"isVisible",id:"isvisible",level:4,children:[]},{name:"iterateParent",id:"iterateparent",level:4,children:[]},{name:"move",id:"move",level:4,children:[]},{name:"openAll",id:"openall",level:4,children:[]},{name:"openNodeAndParents",id:"opennodeandparents",level:4,children:[]},{name:"remove",id:"remove",level:4,children:[]},{name:"removeMulti",id:"removemulti",level:4,children:[]},{name:"updateCheck",id:"updatecheck",level:4,children:[]}]},{name:"events(事件)",id:"events事件",level:3,children:[{name:"check:node",id:"checknode",level:4,children:[]},{name:"click:node",id:"clicknode",level:4,children:[]},{name:"close:node",id:"closenode",level:4,children:[]},{name:"open:node",id:"opennode",level:4,children:[]}]},{name:"slots(插槽)",id:"slots插槽",level:3,children:[{name:"default(默认插槽)",id:"default默认插槽",level:4,children:[]},{name:"placeholder",id:"placeholder",level:4,children:[]},{name:"prepend",id:"prepend",level:4,children:[]},{name:"append",id:"append",level:4,children:[]}]}]},{name:"Draggable",id:"draggable",level:2,children:[{name:"props",id:"props-1",level:3,children:[{name:"beforeDragOpen",id:"beforedragopen",level:4,children:[]},{name:"disableDrag",id:"disabledrag",level:4,children:[]},{name:"disableDrop",id:"disabledrop",level:4,children:[]},{name:"dragOpen",id:"dragopen",level:4,children:[]},{name:"dragOpenDelay",id:"dragopendelay",level:4,children:[]},{name:"eachDraggable",id:"eachdraggable",level:4,children:[]},{name:"eachDroppable",id:"eachdroppable",level:4,children:[]},{name:"externalDataHandler",id:"externaldatahandler",level:4,children:[]},{name:"keepPlaceholder",id:"keepplaceholder",level:4,children:[]},{name:"maxLevel",id:"maxlevel",level:4,children:[]},{name:"onExternalDragOver",id:"onexternaldragover",level:4,children:[]},{name:"resolveStartMovePoint",id:"resolvestartmovepoint",level:4,children:[]},{name:"rootDroppable",id:"rootdroppable",level:4,children:[]},{name:"triggerClass",id:"triggerclass",level:4,children:[]}]},{name:"methods(方法)",id:"methods方法-1",level:3,children:[{name:"getNodeByElement",id:"getnodebyelement",level:4,children:[]},{name:"isDraggable",id:"isdraggable",level:4,children:[]},{name:"isDroppable",id:"isdroppable",level:4,children:[]},{name:"ondragstart",id:"ondragstart",level:4,children:[]}]},{name:"events(事件)",id:"events事件-1",level:3,children:[{name:"before-drag-start",id:"before-drag-start",level:4,children:[]},{name:"after-drop",id:"after-drop",level:4,children:[]},{name:"change",id:"change",level:4,children:[]},{name:"enter",id:"enter",level:4,children:[]},{name:"leave",id:"leave",level:4,children:[]}]}]},{name:"Others",id:"others",level:2,children:[{name:"Stat",id:"stat",level:3,children:[]},{name:"dragContext",id:"dragcontext",level:3,children:[{name:"startInfo",id:"startinfo",level:4,children:[]},{name:"targetInfo",id:"targetinfo",level:4,children:[]},{name:"dragNode",id:"dragnode-1",level:4,children:[]},{name:"startTree",id:"starttree",level:4,children:[]},{name:"targetTree",id:"targettree",level:4,children:[]},{name:"Example - dragContext",id:"example---dragcontext",level:4,children:[]}]},{name:"StartInfo",id:"startinfo-1",level:3,children:[]}]}]};f(r.name,i),s.value=r.children||[],m(()=>{s.value=null})}},D={class:"docs-view"},w={class:"article mt-14 mb-8 prose"},C=y('<p><code>he-tree</code>导出两个组件, <a href="#basetree">BaseTree</a> 和 <a href="#draggable">Draggable</a>. BaseTree 是基础组件. Draggable 继承于前者, 包含拖拽功能. 下文中的内容根据此粗略地分成了两部分.</p><p>下文中的<code>Stat&lt;never&gt;</code>, <code>Stat&lt;unknown&gt;</code>是 TypeScript 的类型格式. 其中的<code>unknown</code>, <code>never</code>, <code>any</code>基本都是指使用者提供的节点数据类型. <code>Stat&lt;never&gt;</code>和<code>Stat&lt;unknown&gt;</code>是一样的, 表示使用者的节点数据的<a href="#Stat">stat</a>.</p><p>下文中的所有坐标原点是窗口左上角. 如<code>Element.getBoundingClientRect()</code>返回的坐标.</p>',3),j=t("p",null,"由下向上显示.",-1),B=t("p",null,[e("指定数据中的"),t("code",null,"children"),e(" key")],-1),T=t("p",null,"默认展开所有节点.",-1),I=t("p",null,"节点缩进像素.",-1),N=t("p",null,"使用 index 或者返回一个唯一值作为 Vue 循环的 key。",-1),P=t("p",null,"由右向左显示.",-1),A=t("p",null,[e("钩子函数. 数据初始时处理每一个"),t("a",{href:"#Stat"},"stat"),e(".")],-1),E=t("p",null,"渲染为表格.",-1),O=t("p",null,[e("指定数据中的"),t("code",null,"text"),e(" key. 默认模板会显示它. 如果你通过插槽自定义了节点, 这个可能就不需要了.")],-1),M=t("p",null,"当内部数据变动时, 更新到外部的方式.",-1),H=t("li",null,"modify: 默认. 直接修改绑定的数据对象.",-1),z=t("li",null,"new: 提交一个新的数据对象, 适用于 vuex.",-1),V=t("p",null,"启用虚拟列表.",-1),K=t("p",null,"虚拟列表初始渲染数量.用于 SSR(服务端渲染).",-1),U=t("p",null,[e("显示树连接线。"),t("strong",null,"此功能在表格模式下无效。")],-1),$=t("p",null,"树连接线水平方向位移，单位：像素。",-1),R=t("p",null,"向浏览器控制台输出一条水印信息.",-1),F=t("p",null,"拖拽时的节点 stat.",-1),G=t("p",null,"有东西拖拽到了此树上.",-1),W=t("p",null,[e("此树实例, 即"),t("code",null,"this"),e(".")],-1),q=t("p",null,"所有 stats, 树形结构.",-1),J=t("p",null,"所有 stats, 扁平结构.",-1),Q=t("p",null,"树的第一级节点的数组的 stats。可以看作不存在的根节点的子集。",-1),X=t("p",null,"一些方法的例子，点击右上角图标查看源码。",-1),Y=t("p",null,[e("增加节点. parent 为 null 时代表根节点. "),t("a",{href:"#methods-examples"},"示例")],-1),Z=t("p",null,[e("增加多个连续节点. parent 为 null 时代表根节点. "),t("a",{href:"#methods-examples"},"示例")],-1),ee=t("p",null,[e("操作数据时, 会导致组件内部提交整个树的新数据. 此方法可以合并多个操作, 从而只提交一次. "),t("a",{href:"#methods-examples"},"示例")],-1),le=t("p",null,[e("折叠所有节点. "),t("a",{href:"#methods-examples"},"示例")],-1),te=t("p",null,[e("获取所有勾选的节点 stat. 参数"),t("code",null,"withDemi"),e("表示是否包含半选的节点(后代节点未完全选中). "),t("a",{href:"#methods-examples"},"示例")],-1),ne=t("p",null,[e("生成并获取当前树的树形数据. 移除了 stat. 参数"),t("code",null,"filter"),e("可以对每个数据进行处理. "),t("a",{href:"#methods-examples"},"示例")],-1),de=t("p",null,"获取当前树的根元素.",-1),ae=t("p",null,"获取一个节点的同级.",-1),oe=t("p",null,[e("根据节点数据获取节点的"),t("code",null,"stat"),e(".")],-1),ie=t("p",null,[e("获取所有未勾选的节点 stat. 参数"),t("code",null,"withDemi"),e("表示是否包含半选的节点(后代节点未完全选中).")],-1),re=t("p",null,[e("判断此树是否包含对应节点数据的"),t("code",null,"stat"),e(".")],-1),se=t("p",null,"判断节点是否可见. 如果父级折叠, 则后代不可见. 参数可以是节点数据或 stat.",-1),ce=t("p",null,[e("遍历节点的父级. 参数"),t("code",null,"opt.withSelf"),e("表示是否包含该节点. 例:")],-1),ue=t("p",null,[e("移动节点. parent 为 null 时代表根节点. 参考"),t("code",null,"add"),e("的例子："),t("a",{href:"#methods-examples"},"示例")],-1),_e=t("p",null,[e("展开所有节点. "),t("a",{href:"#methods-examples"},"示例")],-1),pe=t("p",null,[e("打开节点及其所有父级节点，以确保该节点不会因为父级未打开而不显示. 参数 "),t("code",null,"nodeDataOrStat"),e(" 可以是节点数据或者节点"),t("code",null,"stat"),e(". "),t("a",{href:"#methods-examples"},"示例")],-1),he=t("p",null,"删除节点.",-1),ge=t("p",null,"删除多个节点.",-1),ve=t("p",null,"从末端到根, 重新计算每个节点的勾选状态.",-1),fe=t("p",null,"参数: stat. 节点勾选状态改变时触发.",-1),me=t("p",null,"参数: stat. 点击节点时触发.",-1),be=t("p",null,"参数: stat. 折叠节点时触发.",-1),ye=t("p",null,"参数: stat. 展开节点时触发.",-1),Se=t("p",null,"用来自定义节点样式. 参数:",-1),Le=t("ul",null,[t("li",null,"node: 节点数据"),t("li",null,"stat: 节点内部信息"),t("li",null,"indentStyle: 节点缩进样式. 仅当渲染为表格时需要使用者将其应用到某列上, 一般是第一列."),t("li",null,"tree: 树的实例.")],-1),xe=t("p",null,"占位元素内部. 可以用来添加提示性文字. 参数:",-1),ke=t("ul",null,[t("li",null,"tree: 树的实例.")],-1),De=t("p",null,"树的根元素内开始处. 仅用于渲染为表格时添加表头(thead). 参数:",-1),we=t("ul",null,[t("li",null,"tree: 树的实例.")],-1),Ce=t("p",null,"树的根元素内结束前. 仅用于渲染为表格时添加表底部(tfoot). 参数:",-1),je=t("ul",null,[t("li",null,"tree: 树的实例.")],-1),Be=t("p",null,"钩子函数. 拖动到节点上层时打开节点前执行. 可以返回 Promise.",-1),Te=t("p",null,[e("禁用此树的"),t("strong",null,"拖出"),e("功能.")],-1),Ie=t("p",null,[e("禁用此树的"),t("strong",null,"拖入"),e("功能.")],-1),Ne=t("p",null,"拖动到节点上层时是否打开节点.",-1),Pe=t("p",null,"拖动到节点上层时打开节点前的等待的毫秒.",-1),Ae=t("p",null,[e("钩子函数. 设置每个节点是否可"),t("strong",null,"拖动"),e(". 子级如果没有指定, 会继承父级的值.")],-1),Ee=t("p",null,[e("钩子函数. 设置每个节点是否可"),t("strong",null,"拖入"),e(". 子级如果没有指定, 会继承父级的值.")],-1),Oe=t("p",null,"当外部使用 Drag and Drop API 拖拽到树上层并结束拖拽时发生. 用来告知树此次拖拽应该接收的数据.",-1),Me=t("p",null,"拖拽离开树时是否保留占位元素.",-1),He=t("p",null,[e("拖拽时的最大层级数. 如果拖拽将导致树超过此层数, 则会阻止"),t("strong",null,"拖放"),e(".")],-1),ze=t("p",null,[e("当外部使用 Drag and Drop API 拖拽到树上层时发生. 参数 event 是 Drag and Drop API 原生事件"),t("code",null,"dragover"),e("的事件对象. 返回布尔值判断是否处理该事件.")],-1),Ve=t("p",null,[e("拖动节点将被看做一个点. 拖动开始时如何获取拖动点的坐标. 默认获取节点的左上角. "),t("code",null,"mouse"),e("表示使用鼠标坐标. 或者传入函数返回自定义坐标: "),t("code",null,"{x:number,y:number}"),e(".")],-1),Ke=t("p",null,[e("钩子函数. 设置最高级(根)是否可"),t("strong",null,"拖入"),e(". 默认"),t("code",null,"true"),e(".")],-1),Ue=t("p",null,"触发拖拽的元素样式. 默认是节点本身. 可以设置成节点的某个子元素. 支持多个样式.",-1),$e=t("p",null,"根据 HTML 元素获取节点 stat.",-1),Re=t("p",null,"判断节点是否可拖动.",-1),Fe=t("p",null,[e("判断节点是否可"),t("strong",null,"拖入"),e(".")],-1),Ge=t("p",null,[e("HTML 拖放 API 的 dragstart 事件钩子。您可以使用 HTML 拖放 API 的 "),t("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage"},"setDragImage"),e(" 方法自定义拖动图像。请参考问题: "),t("a",{href:"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535"},"https://github.com/phphe/he-tree/issues/99#issuecomment-1916000535")],-1),We=t("p",null,"参数: dragNode. 拖拽开始前触发.",-1),qe=t("p",null,[e("参数: 无. 拖拽完成时触发. 跨树时, 仅在"),t("strong",null,"拖入"),e("的树触发.")],-1),Je=t("p",null,"参数: 无. 拖拽完成且造成改变时触发. 跨树时, 两棵树都会触发.",-1),Qe=t("p",null,"参数: DragEvent. 拖拽进入树元素边界时触发.",-1),Xe=t("p",null,"参数: DragEvent. 拖拽离开树元素边界时触发.",-1),Ye=t("p",null,"组件内部将会为每一个节点创建 stat 对象, 用了存储运行时数据.",-1),Ze=t("p",null,[e("拖拽时的相关信息对象，"),t("a",{href:"#example---dragcontext"},"例子"),e(". 包括属性: startInfo, targetInfo, dragNode, startTree, targetTree. 引入:")],-1),el=t("p",null,[e("类型: "),t("a",{href:"#StartInfo"},"StartInfo"),e(". 拖拽开始的信息.")],-1),ll=t("p",null,[e("类型: "),t("a",{href:"#StartInfo"},"StartInfo"),e(". 拖拽的目标的信息.")],-1),tl=t("p",null,[e("类型: "),t("a",{href:"#Stat"},"Stat"),e(". 拖拽的节点.")],-1),nl=t("p",null,"Draggable 组件实例. 拖拽的起始树.",-1),dl=t("p",null,"Draggable 组件实例. 拖拽的目标树.",-1),al=t("p",null,[e("在"),t("a",{href:"#eachdroppable"},"eachDroppable"),e("中通过 dragContext 获取 dragNode，达成效果：奇数节点只接收奇数节点，偶数节点只接收偶数节点。")],-1);function ol(i,r,il,rl,sl,cl){const d=o("vheading"),a=o("CodeContainer"),c=o("Anchor"),u=o("inject___compiled_docs_code_demo_wrapper_780c9d140eb0f72ee6f94457822d85f9_vue_9c74fc429c3de734470420439cf07532"),_=o("inject___compiled_docs_code_demo_wrapper_7cfa2bf2df136c5b9d386acfd3002966_vue_2fbc68a86ad0ff824af4f09851a8c662");return S(),b("div",D,[t("div",w,[l(d,{level:1,id:"api"},{default:n(()=>[e("API")]),_:1}),C,l(d,{level:2,id:"basetree"},{default:n(()=>[e("BaseTree")]),_:1}),l(d,{level:3,id:"props"},{default:n(()=>[e("props")]),_:1}),l(d,{level:4,id:"btt"},{default:n(()=>[e("btt")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),j,l(d,{level:4,id:"childrenkey"},{default:n(()=>[e("childrenKey")]),_:1}),l(a,{codeLanguage:"js",code:'{ type: String, default: "children" }\n'}),B,l(d,{level:4,id:"defaultopen"},{default:n(()=>[e("defaultOpen")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),T,l(d,{level:4,id:"indent"},{default:n(()=>[e("indent")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),I,l(d,{level:4,id:"nodekey"},{default:n(()=>[e("nodeKey")]),_:1}),N,l(a,{codeLanguage:"js",code:"{ type:  \"index\" | ((stat: Stat<any>, index: number) => any), default: 'index' }\n"}),l(d,{level:4,id:"rtl"},{default:n(()=>[e("rtl")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),P,l(d,{level:4,id:"stathandler"},{default:n(()=>[e("statHandler")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: (stat: Stat<any>) => Stat<any> }\n"}),A,l(d,{level:4,id:"table"},{default:n(()=>[e("table")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),E,l(d,{level:4,id:"textkey"},{default:n(()=>[e("textKey")]),_:1}),l(a,{codeLanguage:"js",code:'{ type: String, default: "text" }\n'}),O,l(d,{level:4,id:"updatebehavior"},{default:n(()=>[e("updateBehavior")]),_:1}),M,t("ul",null,[H,z,t("li",null,[e("disabled: 不提交. 你可以使用"),l(c,{to:i.resolveHref("/zh/v2/api#getdata"),underline:""},{default:n(()=>[e("getData")]),_:1},8,["to"]),e("方法手动生成并获取当前数据.")])]),l(d,{level:4,id:"virtualization"},{default:n(()=>[e("virtualization")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),V,l(d,{level:4,id:"virtualizationprerendercount"},{default:n(()=>[e("virtualizationPrerenderCount")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Number, default: 20 }\n"}),K,l(d,{level:4,id:"treeline"},{default:n(()=>[e("treeLine")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),U,l(d,{level:4,id:"treelineoffset"},{default:n(()=>[e("treeLineOffset")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Number, default: 8 }\n"}),$,l(d,{level:4,id:"watermark"},{default:n(()=>[e("watermark")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: false }\n"}),R,l(d,{level:3,id:"data"},{default:n(()=>[e("data")]),_:1}),l(d,{level:4,id:"dragnode"},{default:n(()=>[e("dragNode")]),_:1}),F,l(d,{level:4,id:"dragovering"},{default:n(()=>[e("dragOvering")]),_:1}),G,l(d,{level:4,id:"self"},{default:n(()=>[e("self")]),_:1}),W,l(d,{level:4,id:"stats"},{default:n(()=>[e("stats")]),_:1}),l(a,{codeLanguage:"ts",code:"type 类型 = Stat<你的节点类型>[]\n"}),q,l(d,{level:4,id:"statsflat"},{default:n(()=>[e("statsFlat")]),_:1}),l(a,{codeLanguage:"ts",code:"type 类型 = Stat<你的节点类型>[]\n"}),J,l(d,{level:3,id:"computed"},{default:n(()=>[e("computed")]),_:1}),l(d,{level:4,id:"rootchildren"},{default:n(()=>[e("rootChildren")]),_:1}),l(a,{codeLanguage:"ts",code:"type 类型 = Stat<你的节点类型>[]\n"}),Q,l(d,{level:3,id:"methods方法"},{default:n(()=>[e("methods(方法)")]),_:1}),l(d,{level:4,id:"methods-examples"},{default:n(()=>[e("methods examples")]),_:1}),X,l(u),l(d,{level:4,id:"add"},{default:n(()=>[e("add")]),_:1}),l(a,{codeLanguage:"ts",code:"(nodeData: unknown, parent?: Stat<unknown> | null | undefined, index?: number | null | undefined): void;\n"}),Y,l(d,{level:4,id:"addmulti"},{default:n(()=>[e("addMulti")]),_:1}),l(a,{codeLanguage:"ts",code:"(\n  dataArr: any[],\n  parent?: Stat<any> | null,\n  startIndex?: number | null\n): void;\n"}),Z,l(d,{level:4,id:"batchupdate"},{default:n(()=>[e("batchUpdate")]),_:1}),l(a,{codeLanguage:"ts",code:"(task: () => any): void;\n"}),ee,l(d,{level:4,id:"closeall"},{default:n(()=>[e("closeAll")]),_:1}),l(a,{codeLanguage:"ts",code:"(): void\n"}),le,l(d,{level:4,id:"getchecked"},{default:n(()=>[e("getChecked")]),_:1}),l(a,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),te,l(d,{level:4,id:"getdata"},{default:n(()=>[e("getData")]),_:1}),l(a,{codeLanguage:"ts",code:"(filter?: ((data: never) => never) | undefined, root?: Stat<never> | undefined): never[];\n"}),ne,l(d,{level:4,id:"getrootel"},{default:n(()=>[e("getRootEl")]),_:1}),l(a,{codeLanguage:"ts",code:"(): HTMLElement;\n"}),de,l(d,{level:4,id:"getsiblings"},{default:n(()=>[e("getSiblings")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<never>): Stat<never>[];\n"}),ae,l(d,{level:4,id:"getstat"},{default:n(()=>[e("getStat")]),_:1}),l(a,{codeLanguage:"ts",code:"(nodeData: unknown): Stat<unknown>\n"}),oe,l(d,{level:4,id:"getunchecked"},{default:n(()=>[e("getUnchecked")]),_:1}),l(a,{codeLanguage:"ts",code:"(withDemi?: boolean | undefined): Stat<unknown>[]\n"}),ie,l(d,{level:4,id:"has"},{default:n(()=>[e("has")]),_:1}),l(a,{codeLanguage:"ts",code:"(nodeData: unknown): boolean\n"}),re,l(d,{level:4,id:"isvisible"},{default:n(()=>[e("isVisible")]),_:1}),l(a,{codeLanguage:"ts",code:"(statOrNodeData: Stat<unknown>|unknown): boolean;\n"}),se,l(d,{level:4,id:"iterateparent"},{default:n(()=>[e("iterateParent")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<unknown>, opt?: {\n    withSelf: boolean;\n} | undefined): Generator<Stat<unknown>, void, unknown>;\n"}),ce,l(a,{codeLanguage:"ts",code:"for (const parentStat of tree.iterateParent(nodeStat, { withSelf: false })) {\n  //\n}\n"}),l(d,{level:4,id:"move"},{default:n(()=>[e("move")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<unknown>, parent: Stat<unknown> | null, index: number): boolean;\n"}),ue,l(d,{level:4,id:"openall"},{default:n(()=>[e("openAll")]),_:1}),l(a,{codeLanguage:"ts",code:"(): void\n"}),_e,l(d,{level:4,id:"opennodeandparents"},{default:n(()=>[e("openNodeAndParents")]),_:1}),l(a,{codeLanguage:"ts",code:"(nodeDataOrStat): void\n"}),pe,l(d,{level:4,id:"remove"},{default:n(()=>[e("remove")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<unknown>): boolean;\n"}),he,l(d,{level:4,id:"removemulti"},{default:n(()=>[e("removeMulti")]),_:1}),l(a,{codeLanguage:"ts",code:"(dataArr: any[]): boolean;\n"}),ge,l(d,{level:4,id:"updatecheck"},{default:n(()=>[e("updateCheck")]),_:1}),l(a,{codeLanguage:"ts",code:"(): void\n"}),ve,l(d,{level:3,id:"events事件"},{default:n(()=>[e("events(事件)")]),_:1}),l(d,{level:4,id:"checknode"},{default:n(()=>[e("check:node")]),_:1}),fe,l(d,{level:4,id:"clicknode"},{default:n(()=>[e("click:node")]),_:1}),me,l(d,{level:4,id:"closenode"},{default:n(()=>[e("close:node")]),_:1}),be,l(d,{level:4,id:"opennode"},{default:n(()=>[e("open:node")]),_:1}),ye,l(d,{level:3,id:"slots插槽"},{default:n(()=>[e("slots(插槽)")]),_:1}),l(d,{level:4,id:"default默认插槽"},{default:n(()=>[e("default(默认插槽)")]),_:1}),Se,Le,l(d,{level:4,id:"placeholder"},{default:n(()=>[e("placeholder")]),_:1}),xe,ke,l(d,{level:4,id:"prepend"},{default:n(()=>[e("prepend")]),_:1}),De,we,l(d,{level:4,id:"append"},{default:n(()=>[e("append")]),_:1}),Ce,je,l(d,{level:2,id:"draggable"},{default:n(()=>[e("Draggable")]),_:1}),l(d,{level:3,id:"props-1"},{default:n(()=>[e("props")]),_:1}),l(d,{level:4,id:"beforedragopen"},{default:n(()=>[e("beforeDragOpen")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<any>) : void | Promise<void>\n"}),Be,l(d,{level:4,id:"disabledrag"},{default:n(()=>[e("disableDrag")]),_:1}),l(a,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),Te,l(d,{level:4,id:"disabledrop"},{default:n(()=>[e("disableDrop")]),_:1}),l(a,{codeLanguage:"js",code:"{\n  type: Boolean\n}\n"}),Ie,l(d,{level:4,id:"dragopen"},{default:n(()=>[e("dragOpen")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Boolean, default: true }\n"}),Ne,l(d,{level:4,id:"dragopendelay"},{default:n(()=>[e("dragOpenDelay")]),_:1}),l(a,{codeLanguage:"js",code:"{ type: Number, default: 0 }\n"}),Pe,l(d,{level:4,id:"eachdraggable"},{default:n(()=>[e("eachDraggable")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Ae,l(d,{level:4,id:"eachdroppable"},{default:n(()=>[e("eachDroppable")]),_:1}),l(a,{codeLanguage:"ts",code:"(stat: Stat<any>) : boolean | null\n"}),Ee,l(d,{level:4,id:"externaldatahandler"},{default:n(()=>[e("externalDataHandler")]),_:1}),l(a,{codeLanguage:"ts",code:"(event: DragEvent) : any\n"}),Oe,l(d,{level:4,id:"keepplaceholder"},{default:n(()=>[e("keepPlaceholder")]),_:1}),l(a,{codeLanguage:"ts",code:"{ type: Boolean, default: false }\n"}),Me,l(d,{level:4,id:"maxlevel"},{default:n(()=>[e("maxLevel")]),_:1}),l(a,{codeLanguage:"ts",code:"{\n  type: Number\n}\n"}),He,l(d,{level:4,id:"onexternaldragover"},{default:n(()=>[e("onExternalDragOver")]),_:1}),l(a,{codeLanguage:"ts",code:"(event: DragEvent) : boolean\n"}),ze,l(d,{level:4,id:"resolvestartmovepoint"},{default:n(()=>[e("resolveStartMovePoint")]),_:1}),l(a,{codeLanguage:"ts",code:'"mouse" | "default" | ((dragElement: HTMLElement) : Point)\n'}),Ve,l(d,{level:4,id:"rootdroppable"},{default:n(()=>[e("rootDroppable")]),_:1}),l(a,{codeLanguage:"ts",code:"boolean | () : boolean\n"}),Ke,l(d,{level:4,id:"triggerclass"},{default:n(()=>[e("triggerClass")]),_:1}),l(a,{codeLanguage:"js",code:"{\n  type: [String, Array]\n} // string | string[]\n"}),Ue,l(d,{level:3,id:"methods方法-1"},{default:n(()=>[e("methods(方法)")]),_:1}),l(d,{level:4,id:"getnodebyelement"},{default:n(()=>[e("getNodeByElement")]),_:1}),l(a,{codeLanguage:"ts",code:"(el: HTMLElement): Stat<any> | null\n"}),$e,l(d,{level:4,id:"isdraggable"},{default:n(()=>[e("isDraggable")]),_:1}),l(a,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),Re,l(d,{level:4,id:"isdroppable"},{default:n(()=>[e("isDroppable")]),_:1}),l(a,{codeLanguage:"ts",code:"(node: Stat<any>): boolean\n"}),Fe,l(d,{level:4,id:"ondragstart"},{default:n(()=>[e("ondragstart")]),_:1}),l(a,{codeLanguage:"ts",code:"(event: DragEvent) => void\n"}),Ge,l(d,{level:3,id:"events事件-1"},{default:n(()=>[e("events(事件)")]),_:1}),l(d,{level:4,id:"before-drag-start"},{default:n(()=>[e("before-drag-start")]),_:1}),We,l(d,{level:4,id:"after-drop"},{default:n(()=>[e("after-drop")]),_:1}),qe,l(d,{level:4,id:"change"},{default:n(()=>[e("change")]),_:1}),Je,l(d,{level:4,id:"enter"},{default:n(()=>[e("enter")]),_:1}),Qe,l(d,{level:4,id:"leave"},{default:n(()=>[e("leave")]),_:1}),Xe,l(d,{level:2,id:"others"},{default:n(()=>[e("Others")]),_:1}),l(d,{level:3,id:"stat"},{default:n(()=>[e("Stat")]),_:1}),Ye,l(a,{codeLanguage:"ts",code:"{\n  [x: string]: any // 可以向stat附加任何键值\n  data: T // 指向对应的节点数据\n  open: boolean // 是否展开\n  parent: Stat<T> | null // 父级节点stat\n  children: Stat<T>[] // 子级节点\n  level: number // 层级. 层级从1开始.\n  isStat: boolean // 是否是stat对象\n  hidden: boolean // 是否隐藏\n  checked: boolean | 0 // 是否勾选. 0表示后代节点部分勾选\n  draggable: boolean | null // 是否可拖动. null表示继承父级.\n  droppable: boolean | null // 是否可拖入. null表示继承父级.\n  style: any // 自定义样式. 支持Vue的style格式.\n  class: any // 自定义样式类. 支持Vue的class格式.\n}\n"}),l(d,{level:3,id:"dragcontext"},{default:n(()=>[e("dragContext")]),_:1}),Ze,l(a,{codeLanguage:"ts",code:"// vue3\nimport { dragContext } from '@he-tree/vue'\n// vue2\nimport { dragContext } from '@he-tree/vue/vue2'\n"}),l(d,{level:4,id:"startinfo"},{default:n(()=>[e("startInfo")]),_:1}),el,l(d,{level:4,id:"targetinfo"},{default:n(()=>[e("targetInfo")]),_:1}),ll,l(d,{level:4,id:"dragnode-1"},{default:n(()=>[e("dragNode")]),_:1}),tl,l(d,{level:4,id:"starttree"},{default:n(()=>[e("startTree")]),_:1}),nl,l(d,{level:4,id:"targettree"},{default:n(()=>[e("targetTree")]),_:1}),dl,l(d,{level:4,id:"example---dragcontext"},{default:n(()=>[e("Example - dragContext")]),_:1}),al,l(_),l(d,{level:3,id:"startinfo-1"},{default:n(()=>[e("StartInfo")]),_:1}),l(a,{codeLanguage:"ts",code:"{\n  tree: DraggableTreeType; // Draggable组件的实例\n  dragNode: Stat<any>; // 拖拽节点\n  parent: Stat<any> | null; // 拖拽节点父级\n  siblings: Stat<any>[]; // 拖拽节点同级\n  indexBeforeDrop: number; // 拖拽节点在拖拽结束前的索引\n}\n"})])])}const gl=g(k,[["render",ol]]);export{gl as default};
